---
import { getCollection } from 'astro:content';

// Get all blog posts
const allPosts = await getCollection('blog', ({ data }) => {
  return !data.draft && new Date(data.publishDate) <= new Date();
});

// Organize posts by year and month
const archiveData = {};
allPosts.forEach(post => {
  const date = new Date(post.data.publishDate);
  const year = date.getFullYear();
  const month = date.getMonth(); // 0-11
  
  if (!archiveData[year]) {
    archiveData[year] = {};
  }
  
  if (!archiveData[year][month]) {
    archiveData[year][month] = [];
  }
  
  archiveData[year][month].push(post);
});

// Sort years in descending order
const sortedYears = Object.keys(archiveData)
  .map(year => parseInt(year))
  .sort((a, b) => b - a);

// Month names
const monthNames = [
  'January', 'February', 'March', 'April', 'May', 'June',
  'July', 'August', 'September', 'October', 'November', 'December'
];
---

<div class="archive-dropdown">
  <div class="archive-header">
    <h3 class="archive-title">Archive</h3>
    <button class="archive-toggle" id="archive-main-toggle">
      <span class="toggle-icon">â–¼</span>
    </button>
  </div>
  
  <div class="archive-container" id="archive-main-content">
    {sortedYears.map(year => {
      const yearData = archiveData[year];
      const monthsWithPosts = Object.keys(yearData)
        .map(month => parseInt(month))
        .sort((a, b) => b - a); // Descending order (Dec to Jan)
      
      return (
        <div class="year-group">
          <div class="year-header">
            <a href={`/archive/${year}`} class="year-link">
              <span class="year-text">{year}</span>
              <span class="year-count">({Object.values(yearData).flat().length})</span>
            </a>
            <button class="year-toggle" data-year={year}>
              <span class="toggle-icon">â–¼</span>
            </button>
          </div>
          
          <div class="months-container" data-year-content={year}>
            {monthsWithPosts.map(month => {
              const posts = yearData[month];
              const monthNum = (month + 1).toString().padStart(2, '0');
              return (
                <div class="month-group">
                  <div class="month-header">
                    <a href={`/archive/${year}/${monthNum}`} class="month-link">
                      <span class="month-text">{monthNames[month]}</span>
                      <span class="month-count">({posts.length})</span>
                    </a>
                    <button class="month-toggle" data-month={`${year}-${month}`}>
                      <span class="toggle-icon">â–¼</span>
                    </button>
                  </div>
                  
                  <div class="posts-container" data-month-content={`${year}-${month}`}>
                    {posts
                      .sort((a, b) => new Date(b.data.publishDate).getTime() - new Date(a.data.publishDate).getTime())
                      .map(post => (
                        <a href={`/blog/${post.slug}`} class="archive-post-link">
                          <span class="post-date">
                            {new Date(post.data.publishDate).getDate()}
                          </span>
                          <span class="post-title">{post.data.title}</span>
                        </a>
                      ))
                    }
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      );
    })}
  </div>
  
  <div class="rss-section">
    <a href="/rss.xml" class="rss-button" target="_blank" rel="noopener noreferrer">
      <span class="rss-icon">ðŸ“¡</span>
      <span class="rss-text">RSS Feed</span>
    </a>
  </div>
</div>

<style>
  .archive-dropdown {
    background: var(--card-bg);
    border: 1px solid var(--card-border);
    border-radius: 8px;
    padding: 1.5rem;
    margin-bottom: 2rem;
  }
  
  .archive-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid var(--border-light);
  }
  
  .archive-title {
    color: var(--text-primary);
    font-size: 1.25rem;
    font-weight: 600;
    margin: 0;
  }
  
  .archive-toggle {
    background: none;
    border: none;
    cursor: pointer;
    color: var(--color-primary);
    font-size: 0.75rem;
    padding: 0.25rem;
    transition: all 0.2s ease;
    display: block; /* Show on all screen sizes now */
  }
  
  .archive-toggle:hover {
    color: var(--color-primary-hover);
  }
  
  .archive-toggle.expanded .toggle-icon {
    transform: rotate(180deg);
  }
  
  .archive-container {
    margin-bottom: 1.5rem;
    max-height: 1000px;
    transition: max-height 0.3s ease-out;
    overflow: hidden;
  }
  .archive-container.collapsed {
    max-height: 0;
    margin-bottom: 0;
  }
  
  .year-group {
    margin-bottom: 0.5rem;
  }
  
  .year-header,
  .month-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    border-bottom: 1px solid var(--border-light);
    padding: 0.75rem 0;
  }
  
  .year-link,
  .month-link {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: space-between;
    text-decoration: none;
    color: var(--text-primary);
    font-size: 1rem;
    transition: all 0.2s ease;
    padding-right: 0.5rem;
  }
  
  .year-link {
    font-weight: 600;
  }
  
  .month-link {
    font-weight: 500;
    font-size: 0.9rem;
  }
  
  .year-link:hover,
  .month-link:hover {
    color: var(--color-primary);
  }
  
  .year-text,
  .month-text {
    flex: 1;
    text-align: left;
  }
  
  .year-count,
  .month-count {
    color: var(--text-muted);
    font-size: 0.875rem;
    margin-right: 0.5rem;
  }
  
  .year-toggle,
  .month-toggle {
    background: none;
    border: none;
    cursor: pointer;
    color: var(--color-primary);
    font-size: 0.75rem;
    padding: 0.25rem;
    transition: all 0.2s ease;
  }
  
  .year-toggle:hover,
  .month-toggle:hover {
    color: var(--color-primary-hover);
  }
  
  .toggle-icon {
    color: var(--color-primary);
    font-size: 0.75rem;
    transition: transform 0.2s ease;
  }
  
  .year-toggle.expanded .toggle-icon,
  .month-toggle.expanded .toggle-icon {
    transform: rotate(180deg);
  }
  
  .months-container,
  .posts-container {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease-out;
  }
  
  .months-container.expanded,
  .posts-container.expanded {
    max-height: 1000px;
  }
  
  .month-group {
    margin-left: 1rem;
    border-left: 2px solid var(--border-light);
    padding-left: 1rem;
  }
  
  .month-toggle {
    font-weight: 500;
    font-size: 0.9rem;
    padding: 0.5rem 0;
  }
  
  .posts-container {
    margin-left: 1rem;
    padding-left: 1rem;
    border-left: 1px solid var(--border-light);
  }
  
  .archive-post-link {
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    padding: 0.5rem 0;
    text-decoration: none;
    color: var(--text-secondary);
    font-size: 0.875rem;
    transition: color 0.2s ease;
  }
  
  .archive-post-link:hover {
    color: var(--color-primary);
  }
  
  .post-date {
    color: var(--text-muted);
    font-weight: 500;
    font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
    font-size: 0.75rem;
    min-width: 1.5rem;
    text-align: center;
  }
  
  .post-title {
    flex: 1;
    line-height: 1.4;
    font-weight: 500;
  }
  
  .rss-section {
    padding-top: 1rem;
    border-top: 1px solid var(--border-light);
  }
  
  .rss-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem;
    background: var(--color-secondary);
    color: var(--text-inverse);
    text-decoration: none;
    border-radius: 6px;
    font-weight: 500;
    font-size: 0.875rem;
    transition: all 0.3s ease;
    width: 100%;
    justify-content: center;
  }
  
  .rss-button:hover {
    background: var(--color-secondary-hover);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(230, 81, 0, 0.3);
  }
  
  .rss-icon {
    font-size: 1rem;
  }
  
  @media (max-width: 768px) {
    .archive-dropdown {
      padding: 1rem;
    }
    
    .archive-toggle {
      display: block; /* Show archive toggle on mobile */
    }
    
    .archive-container {
      max-height: 2000px;
      margin-bottom: 1.5rem;
    }
    
    .archive-container.collapsed {
      max-height: 0;
      margin-bottom: 0;
    }
    
    .year-header,
    .month-header {
      padding: 0.5rem 0;
    }
    
    .year-link,
    .month-link {
      font-size: 0.9rem;
    }
    
    .month-group {
      margin-left: 0.5rem;
      padding-left: 0.5rem;
    }
    
    .posts-container {
      margin-left: 0.5rem;
      padding-left: 0.5rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Handle main archive toggle (now on all screen sizes)
    const mainToggle = document.getElementById('archive-main-toggle');
    const mainContent = document.getElementById('archive-main-content');
    // By default, expanded on desktop, collapsed on mobile
    function isMobile() {
      return window.matchMedia('(max-width: 768px)').matches;
    }
    function setInitialArchiveState() {
      if (mainToggle && mainContent) {
        if (isMobile()) {
          mainToggle.classList.remove('expanded');
          mainContent.classList.remove('expanded');
          mainContent.classList.add('collapsed');
        } else {
          mainToggle.classList.remove('expanded');
          mainContent.classList.remove('expanded');
          mainContent.classList.add('collapsed');
        }
      }
    }
    setInitialArchiveState();
    window.addEventListener('resize', setInitialArchiveState);
    if (mainToggle && mainContent) {
      mainToggle.addEventListener('click', function() {
        const isExpanded = this.classList.contains('expanded');
        if (isExpanded) {
          this.classList.remove('expanded');
          mainContent.classList.remove('expanded');
          mainContent.classList.add('collapsed');
        } else {
          this.classList.add('expanded');
          mainContent.classList.add('expanded');
          mainContent.classList.remove('collapsed');
        }
      });
    }
    
    // Handle year toggles
    const yearToggles = document.querySelectorAll('.year-toggle');
    yearToggles.forEach(toggle => {
      toggle.addEventListener('click', function() {
        const year = this.dataset.year;
        const container = document.querySelector(`[data-year-content="${year}"]`);
        const isExpanded = this.classList.contains('expanded');
        
        if (isExpanded) {
          this.classList.remove('expanded');
          if (container) container.classList.remove('expanded');
        } else {
          this.classList.add('expanded');
          if (container) container.classList.add('expanded');
        }
      });
    });
    
    // Handle month toggles
    const monthToggles = document.querySelectorAll('.month-toggle');
    monthToggles.forEach(toggle => {
      toggle.addEventListener('click', function() {
        const month = this.dataset.month;
        const container = document.querySelector(`[data-month-content="${month}"]`);
        const isExpanded = this.classList.contains('expanded');
        
        if (isExpanded) {
          this.classList.remove('expanded');
          if (container) container.classList.remove('expanded');
        } else {
          this.classList.add('expanded');
          if (container) container.classList.add('expanded');
        }
      });
    });
  });
</script>