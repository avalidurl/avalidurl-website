---
// Search component for navigation
---

<div class="search-container">
  <button id="search-toggle" class="search-toggle" aria-label="Open search">
    <span class="search-icon">üîç</span>
  </button>
  
  <!-- Search Modal -->
  <div id="search-modal" class="search-modal" role="dialog" aria-labelledby="search-title" aria-hidden="true">
    <div class="search-modal-content">
      <div class="search-header">
        <h2 id="search-title" class="search-title">Search</h2>
        <button id="search-close" class="search-close" aria-label="Close search">√ó</button>
      </div>
      
      <div class="search-input-container">
        <input 
          type="text" 
          id="search-input" 
          class="search-input" 
          placeholder="‚åòK"
          autocomplete="off"
          spellcheck="false"
        />
        <div class="search-shortcuts-display">
          <div class="shortcut-hint">
            <kbd>‚åò</kbd><kbd>K</kbd>
          </div>
        </div>
        <div class="search-spinner" id="search-spinner" aria-hidden="true"></div>
      </div>
      
      <div class="search-results" id="search-results" aria-live="polite">
        <div class="search-shortcuts">
          <p class="search-help">Try searching for:</p>
          <div class="search-suggestions">
            <button class="search-suggestion" data-query="crypto">crypto</button>
            <button class="search-suggestion" data-query="finance">finance</button>
            <button class="search-suggestion" data-query="art">art</button>
            <button class="search-suggestion" data-query="defi">defi</button>
            <button class="search-suggestion" data-query="blockchain">blockchain</button>
          </div>
          
        </div>
      </div>
    </div>
  </div>
  
  <!-- Search Overlay -->
  <div id="search-overlay" class="search-overlay" aria-hidden="true"></div>
</div>

<script>
  // Search functionality
  class SiteSearch {
    constructor() {
      this.isOpen = false;
      this.searchData = null;
      this.searchResults = [];
      
      this.bindEvents();
      this.loadSearchData();
    }
    
    bindEvents() {
      const toggle = document.getElementById('search-toggle');
      const modal = document.getElementById('search-modal');
      const overlay = document.getElementById('search-overlay');
      const close = document.getElementById('search-close');
      const input = document.getElementById('search-input');
      const suggestions = document.querySelectorAll('.search-suggestion');
      
      // Open search
      toggle?.addEventListener('click', () => this.openSearch());
      
      // Close search
      close?.addEventListener('click', () => this.closeSearch());
      overlay?.addEventListener('click', () => this.closeSearch());
      
      // Keyboard shortcuts
      document.addEventListener('keydown', (e) => {
        // Vim-style search: "/" key
        if (e.key === '/' && !this.isOpen && e.target.tagName !== 'INPUT' && e.target.tagName !== 'TEXTAREA') {
          e.preventDefault();
          this.openSearch();
        }
        
        // CMD+K / Ctrl+K (popular in VS Code, GitHub, etc.)
        if ((e.metaKey || e.ctrlKey) && e.key === 'k' && !this.isOpen) {
          e.preventDefault();
          this.openSearch();
        }
        
        // CMD+F / Ctrl+F alternative (when not handled by browser)
        if ((e.metaKey || e.ctrlKey) && e.key === 'f' && !this.isOpen && e.target.tagName !== 'INPUT') {
          // Let browser handle this, but show our search as fallback
          setTimeout(() => {
            if (!this.isOpen) {
              this.openSearch();
            }
          }, 100);
        }
        
        // Escape to close
        if (e.key === 'Escape' && this.isOpen) {
          this.closeSearch();
        }
        
        // Navigation within search results (vim-style)
        if (this.isOpen && document.getElementById('search-input') !== document.activeElement) {
          if (e.key === 'j' || e.key === 'ArrowDown') {
            e.preventDefault();
            this.navigateResults('down');
          }
          if (e.key === 'k' || e.key === 'ArrowUp') {
            e.preventDefault();
            this.navigateResults('up');
          }
          if (e.key === 'Enter') {
            e.preventDefault();
            this.selectResult();
          }
        }
        
        // Focus search input from anywhere in modal
        if (this.isOpen && e.key === 'i' && e.target.tagName !== 'INPUT') {
          e.preventDefault();
          document.getElementById('search-input')?.focus();
        }
        
        // Clear search (vim-style)
        if (this.isOpen && (e.metaKey || e.ctrlKey) && e.key === 'u') {
          e.preventDefault();
          const input = document.getElementById('search-input');
          if (input) {
            input.value = '';
            input.focus();
            this.performSearch('');
          }
        }
      });
      
      // Search input
      input?.addEventListener('input', (e) => {
        this.performSearch(e.target.value);
      });
      
      // Search suggestions
      suggestions.forEach(btn => {
        btn.addEventListener('click', (e) => {
          const query = e.target.dataset.query;
          input.value = query;
          this.performSearch(query);
        });
      });
    }
    
    async loadSearchData() {
      try {
        // In a real implementation, this would be a generated search index
        // For now, we'll use a simple approach
        this.searchData = await this.generateSearchIndex();
      } catch (error) {
        console.error('Failed to load search data:', error);
      }
    }
    
    async generateSearchIndex() {
      // This would ideally be pre-generated at build time
      // For demo purposes, we'll simulate search data
      return {
        posts: [
          // This would be populated from your actual blog posts
          // For now, we'll redirect to a proper search page
        ]
      };
    }
    
    openSearch() {
      this.isOpen = true;
      const modal = document.getElementById('search-modal');
      const overlay = document.getElementById('search-overlay');
      const input = document.getElementById('search-input');
      
      modal?.classList.add('active');
      overlay?.classList.add('active');
      document.body.style.overflow = 'hidden';
      
      // Focus input after animation
      setTimeout(() => {
        input?.focus();
      }, 150);
    }
    
    closeSearch() {
      this.isOpen = false;
      const modal = document.getElementById('search-modal');
      const overlay = document.getElementById('search-overlay');
      const input = document.getElementById('search-input');
      
      modal?.classList.remove('active');
      overlay?.classList.remove('active');
      document.body.style.overflow = '';
      
      // Clear search
      if (input) {
        input.value = '';
      }
      this.clearResults();
    }
    
    async performSearch(query) {
      if (!query || query.length < 2) {
        this.showShortcuts();
        return;
      }
      
      this.showSpinner();
      
      // Simulate search delay
      await new Promise(resolve => setTimeout(resolve, 300));
      
      // For now, redirect to search page with query
      // In a full implementation, you'd show results inline
      window.location.href = `/search?q=${encodeURIComponent(query)}`;
    }
    
    showSpinner() {
      const spinner = document.getElementById('search-spinner');
      const results = document.getElementById('search-results');
      
      spinner?.classList.add('active');
      results?.classList.add('loading');
    }
    
    hideSpinner() {
      const spinner = document.getElementById('search-spinner');
      const results = document.getElementById('search-results');
      
      spinner?.classList.remove('active');
      results?.classList.remove('loading');
    }
    
    showShortcuts() {
      const results = document.getElementById('search-results');
      if (results) {
        results.innerHTML = `
          <div class="search-shortcuts">
            <p class="search-help">Try searching for:</p>
            <div class="search-suggestions">
              <button class="search-suggestion" data-query="crypto">crypto</button>
              <button class="search-suggestion" data-query="finance">finance</button>
              <button class="search-suggestion" data-query="art">art</button>
              <button class="search-suggestion" data-query="defi">defi</button>
              <button class="search-suggestion" data-query="blockchain">blockchain</button>
            </div>
          </div>
        `;
        
        // Re-bind suggestion events
        document.querySelectorAll('.search-suggestion').forEach(btn => {
          btn.addEventListener('click', (e) => {
            const query = e.target.dataset.query;
            const input = document.getElementById('search-input');
            if (input) {
              input.value = query;
              this.performSearch(query);
            }
          });
        });
      }
      this.hideSpinner();
    }
    
    clearResults() {
      this.showShortcuts();
    }
    
    navigateResults(direction) {
      const results = document.querySelectorAll('.search-result-item');
      if (results.length === 0) return;
      
      let currentIndex = Array.from(results).findIndex(el => el.classList.contains('selected'));
      
      if (direction === 'down') {
        currentIndex = currentIndex < results.length - 1 ? currentIndex + 1 : 0;
      } else {
        currentIndex = currentIndex > 0 ? currentIndex - 1 : results.length - 1;
      }
      
      // Remove previous selection
      results.forEach(el => el.classList.remove('selected'));
      
      // Add new selection
      if (results[currentIndex]) {
        results[currentIndex].classList.add('selected');
        results[currentIndex].scrollIntoView({ behavior: 'smooth', block: 'nearest' });
      }
    }
    
    selectResult() {
      const selected = document.querySelector('.search-result-item.selected');
      if (selected) {
        const link = selected.querySelector('a');
        if (link) {
          window.location.href = link.href;
        }
      }
    }
  }
  
  // Initialize search when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    new SiteSearch();
  });
</script>

<style>
  .search-container {
    position: relative;
  }
  
  .search-toggle {
    background: none;
    border: none;
    color: var(--nav-text);
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 4px;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .search-toggle:hover {
    background: var(--bg-tertiary);
    color: var(--nav-accent);
  }
  
  .search-icon {
    font-size: 1.2rem;
    line-height: 1;
  }
  
  /* Search Modal */
  .search-modal {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 1000;
    display: flex;
    align-items: flex-start;
    justify-content: center;
    padding-top: 8vh;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
  }
  
  .search-modal.active {
    opacity: 1;
    visibility: visible;
  }
  
  .search-modal-content {
    background: var(--bg-primary);
    border: 2px solid var(--border-light);
    border-radius: 12px;
    width: 90%;
    max-width: 600px;
    max-height: 80vh;
    overflow: hidden;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.2);
    transform: translateY(-20px);
    transition: transform 0.3s ease;
  }
  
  .search-modal.active .search-modal-content {
    transform: translateY(0);
  }
  
  .search-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    z-index: 999;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
  }
  
  .search-overlay.active {
    opacity: 1;
    visibility: visible;
  }
  
  .search-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1.5rem 2rem;
    border-bottom: 1px solid var(--border-light);
  }
  
  .search-title {
    margin: 0;
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-primary);
  }
  
  .search-close {
    background: none;
    border: none;
    font-size: 1.5rem;
    color: var(--text-muted);
    cursor: pointer;
    padding: 0.25rem;
    border-radius: 4px;
    transition: all 0.2s ease;
    line-height: 1;
  }
  
  .search-close:hover {
    color: var(--text-primary);
    background: var(--bg-tertiary);
  }
  
  .search-input-container {
    position: relative;
    padding: 1.5rem 2rem;
    border-bottom: 1px solid var(--border-light);
  }
  
  .search-input {
    width: 100%;
    padding: 0.75rem 10rem 0.75rem 1rem;
    border: 2px solid var(--border-medium);
    border-radius: 8px;
    font-size: 1rem;
    background: var(--bg-secondary);
    color: var(--text-primary);
    transition: all 0.2s ease;
    box-sizing: border-box;
    position: relative;
    z-index: 1;
  }
  
  .search-input:focus {
    outline: none;
    border-color: var(--color-primary);
    background: var(--bg-primary);
  }

  .search-input::placeholder {
    color: var(--text-muted);
    opacity: 0.7;
    font-size: 1rem;
    line-height: normal;
  }
  
  .search-spinner {
    position: absolute;
    right: 3rem;
    top: 50%;
    transform: translateY(-50%);
    width: 20px;
    height: 20px;
    border: 2px solid var(--border-light);
    border-top: 2px solid var(--color-primary);
    border-radius: 50%;
    opacity: 0;
    transition: opacity 0.2s ease;
  }
  
  .search-spinner.active {
    opacity: 1;
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    0% { transform: translateY(-50%) rotate(0deg); }
    100% { transform: translateY(-50%) rotate(360deg); }
  }
  
  .search-results {
    padding: 2rem;
    max-height: 50vh;
    overflow-y: auto;
  }
  
  .search-shortcuts {
    text-align: center;
  }
  
  .search-help {
    color: var(--text-muted);
    margin-bottom: 1rem;
    font-size: 0.9rem;
  }
  
  .search-suggestions {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
    justify-content: center;
  }
  
  .search-suggestion {
    background: var(--bg-primary);
    border: 1px solid var(--border-light);
    color: var(--text-primary);
    padding: 0.5rem 1rem;
    border-radius: 8px;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }
  
  .search-suggestion:hover {
    background: var(--color-primary);
    color: white;
    border-color: var(--color-primary);
    transform: translateY(-1px);
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);
  }
  
  /* Keyboard Shortcuts Display */
  .search-shortcuts-display {
    position: absolute;
    right: 1rem;
    top: 50%;
    transform: translateY(-50%);
    display: flex;
    gap: 0.75rem;
    align-items: center;
    pointer-events: none;
    z-index: 2;
  }
  
  .shortcut-hint {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    font-size: 0.75rem;
    color: var(--text-muted);
  }
  
  kbd {
    background: var(--bg-tertiary);
    border: 1px solid var(--border-medium);
    border-radius: 3px;
    padding: 0.15rem 0.3rem;
    font-size: 0.7rem;
    font-family: -apple-system, BlinkMacSystemFont, 'SF Mono', 'Monaco', 'Consolas', monospace;
    color: var(--text-secondary);
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    min-width: 1.2rem;
    text-align: center;
    font-weight: 600;
    line-height: 1;
  }
  
  /* Keyboard Shortcuts Help Section */
  .keyboard-shortcuts {
    margin-top: 2rem;
    padding-top: 1.5rem;
    border-top: 1px solid var(--border-light);
  }
  
  .keyboard-shortcuts h4 {
    color: var(--text-primary);
    margin-bottom: 1rem;
    font-size: 0.9rem;
    font-weight: 600;
    text-align: center;
  }
  
  .shortcuts-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 0.75rem;
  }
  
  .shortcut-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.8rem;
  }
  
  .shortcut-keys {
    display: flex;
    gap: 0.2rem;
    min-width: 3rem;
  }
  
  .shortcut-item span {
    color: var(--text-muted);
    font-size: 0.75rem;
  }
  
  /* Search Result Items (for navigation) */
  .search-result-item {
    padding: 0.75rem;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
    border: 1px solid transparent;
  }
  
  .search-result-item:hover,
  .search-result-item.selected {
    background: var(--bg-tertiary);
    border-color: var(--border-medium);
  }
  
  .search-result-item.selected {
    border-color: var(--color-primary);
    background: rgba(102, 102, 102, 0.1);
  }
  
  /* Tablet and smaller desktop adjustments */
  @media (max-width: 1024px) {
    .search-input {
      padding: 0.75rem 8rem 0.75rem 1rem; /* Reduce right padding on smaller screens */
    }
  }

  /* Mobile adjustments */
  @media (max-width: 768px) {
    .search-modal {
      padding-top: 5vh;
    }
    
    .search-modal-content {
      width: 95%;
      max-height: 85vh;
    }
    
    .search-header,
    .search-input-container,
    .search-results {
      padding: 1rem 1.5rem;
    }
    
    .search-suggestions {
      gap: 0.25rem;
    }
    
    .search-suggestion {
      font-size: 0.8rem;
      padding: 0.3rem 0.6rem;
    }
    
    .search-shortcuts-display {
      display: none; /* Hide on mobile to save space */
    }

    .search-input {
      padding: 0.75rem 1rem; /* Reset padding on mobile when shortcuts are hidden */
    }
    
    .shortcuts-grid {
      grid-template-columns: 1fr;
      gap: 0.5rem;
    }
    
    .shortcut-item {
      justify-content: space-between;
    }
    
    .keyboard-shortcuts h4 {
      font-size: 0.85rem;
    }
  }
</style>