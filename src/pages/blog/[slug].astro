---
import Layout from '../../layouts/Layout.astro';
import { getCollection, type CollectionEntry } from 'astro:content';
import { YouTube, Tweet, Vimeo } from 'astro-embed';
import SpotifyEmbed from '../../components/SpotifyEmbed.astro';
import AppleMusicEmbed from '../../components/AppleMusicEmbed.astro';
import TwitterEmbed from '../../components/TwitterEmbed.astro';
import YouTubeEmbed from '../../components/YouTubeEmbed.astro';
import VimeoEmbed from '../../components/VimeoEmbed.astro';
import SoundCloudEmbed from '../../components/SoundCloudEmbed.astro';
import BandcampEmbed from '../../components/BandcampEmbed.astro';
import ImageEmbed from '../../components/ImageEmbed.astro';
import SocialShare from '../../components/SocialShare.astro';
import Breadcrumb from '../../components/Breadcrumb.astro';

export const prerender = true;

export async function getStaticPaths() {
  // Helper function to parse dates consistently in Istanbul timezone
  const parseIstanbulDate = (dateString) => {
    // Handle non-string values
    if (typeof dateString !== 'string') {
      return new Date(dateString);
    }
    // If it's just a date (YYYY-MM-DD), append Istanbul timezone
    if (dateString.match(/^\d{4}-\d{2}-\d{2}$/)) {
      return new Date(dateString + 'T00:00:00+03:00');
    }
    // For datetime strings, parse as-is but assume they're in Istanbul time
    return new Date(dateString);
  };
  
  const blogPosts = await getCollection('blog', ({ data }) => {
    // Don't show draft posts
    if (data.draft) return false;
    
    // Allow posts with dates up to 1 day in the future (for timezone issues)
    const publishDate = parseIstanbulDate(data.publishDate);
    const now = new Date();
    const oneDayFromNow = new Date(now.getTime() + 24 * 60 * 60 * 1000);
    
    // Only filter out posts that are more than 1 day in the future
    return publishDate <= oneDayFromNow;
  });
  
  return blogPosts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

interface Props {
  post: CollectionEntry<'blog'>;
}

const { post } = Astro.props;
const { Content } = await post.render();

// Helper function to parse dates consistently in Istanbul timezone
const parseIstanbulDate = (dateString) => {
  // Handle non-string values
  if (typeof dateString !== 'string') {
    return new Date(dateString);
  }
  // If it's just a date (YYYY-MM-DD), append Istanbul timezone
  if (dateString.match(/^\d{4}-\d{2}-\d{2}$/)) {
    return new Date(dateString + 'T00:00:00+03:00');
  }
  // For datetime strings, parse as-is but assume they're in Istanbul time
  return new Date(dateString);
};

const formattedDate = parseIstanbulDate(post.data.publishDate).toLocaleDateString('en-CA', {
  timeZone: 'Europe/Istanbul'
});

const updatedDate = post.data.updatedDate ? parseIstanbulDate(post.data.updatedDate).toLocaleDateString('en-CA', {
  timeZone: 'Europe/Istanbul'
}) : null;

// Calculate reading time (approximate)
const content = await post.render();
const wordCount = content.remarkPluginFrontmatter?.wordCount || 250; // fallback
const readingTime = Math.ceil(wordCount / 250); // 250 words per minute

// Create canonical URL for this post
const canonicalURL = new URL(`/blog/${post.slug}`, Astro.site || 'https://gokhanturhan.com');

// Breadcrumb items
const breadcrumbItems = [
  { name: 'Home', url: '/' },
  { name: 'Journal', url: '/blog' },
  { name: post.data.title, url: `/blog/${post.slug}` }
];
---

<Layout 
  title={post.data.title} 
  description={post.data.description}
  ogType="article"
  slug={post.slug}
>
  <!-- Article Schema -->
  <script type="application/ld+json" set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": "Article",
    "headline": post.data.title,
    "description": post.data.description,
    "url": canonicalURL.toString(),
    "datePublished": parseIstanbulDate(post.data.publishDate).toISOString(),
    "dateModified": updatedDate ? parseIstanbulDate(post.data.updatedDate).toISOString() : parseIstanbulDate(post.data.publishDate).toISOString(),
    "author": {
      "@type": "Person",
      "name": post.data.author || "Gökhan Turhan",
      "url": "https://gokhanturhan.com",
      "sameAs": [
        "https://x.com/0xgokhan",
        "https://linkedin.com/in/goekhantuerhan"
      ]
    },
    "publisher": {
      "@type": "Person",
      "name": "Gökhan Turhan",
      "url": "https://gokhanturhan.com"
    },
    "mainEntityOfPage": {
      "@type": "WebPage",
      "@id": canonicalURL.toString()
    },
    "articleSection": post.data.category || "Blog",
    "keywords": post.data.tags?.join(", ") || "",
    "wordCount": wordCount,
    "timeRequired": `PT${readingTime}M`,
    "inLanguage": "en-US",
    "isAccessibleForFree": true,
    "genre": post.data.category || "Technology",
    "about": post.data.tags?.map(tag => ({
      "@type": "Thing",
      "name": tag
    })) || []
  })} />
  <!-- Reading Progress Bar -->
  <div class="reading-progress">
    <div class="reading-progress-bar"></div>
  </div>
  
  <main class="blog-container">
    <!-- Breadcrumb Navigation -->
    <Breadcrumb items={breadcrumbItems} />
    
    <!-- Table of Contents -->
    <aside class="table-of-contents">
      <div class="toc-content">
        <h3>Contents</h3>
        <nav class="toc-nav" id="toc-nav">
          <!-- TOC will be populated by JavaScript -->
        </nav>
      </div>
    </aside>
    
    <article class="blog-post">
      <header class="post-header">
        <div class="post-meta">
          <time class="post-date" datetime={post.data.publishDate.toISOString()}>
            {formattedDate}
          </time>
          <span class="reading-time">{readingTime} min read</span>
          <span class="word-count">{wordCount.toLocaleString()} words</span>
          {post.data.category && (
            <a href={`/categories/${post.data.category.toLowerCase().replace(/\s+/g, '-').replace('&', 'and')}`} class="post-category">{post.data.category}</a>
          )}
        </div>
        
        <h1 class="post-title">{post.data.title}</h1>
        
        <p class="post-description">{post.data.description}</p>
        
        {post.data.tags.length > 0 && (
          <div class="post-tags">
            {post.data.tags.sort((a, b) => a.localeCompare(b)).map((tag, index, array) => (
              <>
                <a href={`/topics/${tag.toLowerCase().replace(/\s+/g, '-')}`} class="post-tag">{tag}</a>
                {index < array.length - 1 && ' '}
              </>
            ))}
          </div>
        )}
        
        {updatedDate && (
          <div class="updated-notice">
            <em>Last updated: {updatedDate}</em>
          </div>
        )}
      </header>
      
      <div class="post-content">
        <Content components={{
          YouTube,
          Tweet,
          Vimeo,
          SpotifyEmbed,
          AppleMusicEmbed,
          TwitterEmbed,
          YouTubeEmbed,
          VimeoEmbed,
          SoundCloudEmbed,
          BandcampEmbed,
          ImageEmbed,
          img: ImageEmbed
        }} />
      </div>
      
      <footer class="post-footer">
        <div class="author-info">
          <strong><a href="https://x.com/0xgokhan" target="_blank" rel="noopener" class="author-link">{post.data.author}</a></strong>
          <p>Exploring the intersection of finance, art, and code.</p>
        </div>
        
        <SocialShare 
          title={post.data.title} 
          url={Astro.url.href} 
          description={post.data.description} 
        />
        
        <div class="post-actions">
          <a href="/blog" class="back-to-blog">← Back to Journal</a>
        </div>
      </footer>
    </article>
    
    <aside class="post-sidebar">
      <div class="newsletter-cta">
        <h3>Enjoyed this post?</h3>
        <p>Subscribe to get notified of new insights on finance, art, and technology.</p>
        <form class="newsletter-form" action="https://app.kit.com/forms/8250157/subscriptions" method="post" data-sv-form="8250157" data-uid="6c28efde16" data-format="inline" data-version="5">
          <input type="email" name="email_address" placeholder="your@email.com" required>
          <input type="hidden" name="success_redirect_url" value="https://gokhanturhan.com/thank-you/">
          <button type="submit">Subscribe</button>
        </form>
      </div>
    </aside>
  </main>
</Layout>

<style>
  .blog-post {
    max-width: 100%;
    width: 100%;
    margin: 0 auto;
    background: var(--bg-primary);
    padding: 2rem;
    border: 1px solid var(--border-light);
    margin-bottom: 3rem;
  }
  
  /* Responsive blog post width for optimal reading */
  @media (min-width: 768px) {
    .blog-post {
      max-width: 700px;
      padding: 2.5rem;
    }
  }
  
  @media (min-width: 1024px) {
    .blog-post {
      max-width: 800px;
      padding: 3rem;
    }
  }
  
  @media (min-width: 1200px) {
    .blog-post {
      max-width: 900px;
      padding: 3.5rem;
    }
  }
  
  .post-header {
    border-bottom: 1px solid var(--border-light);
    padding-bottom: 2rem;
    margin-bottom: 3rem;
    position: relative;
  }
  
  .post-header::after {
    content: '';
    position: absolute;
    bottom: -1px;
    left: 0;
    width: 80px;
    height: 1px;
    background: var(--blog-bronze);
  }
  
  .post-meta {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1.5rem;
    font-size: 0.875rem;
    flex-wrap: wrap;
  }
  
  .post-meta > * {
    display: flex;
    align-items: center;
  }
  
  .post-meta > *:not(:last-child)::after {
    content: '•';
    margin-left: 1rem;
    color: var(--text-muted);
  }
  
  .word-count,
  .reading-time {
    color: var(--text-muted);
    font-weight: 500;
  }
  
  .post-category {
    background: var(--blog-sepia);
    color: var(--blog-warm-white);
    padding: 0.2rem 0.6rem;
    border-radius: 3px;
    font-weight: 600;
    letter-spacing: 0.3px;
    text-transform: uppercase;
    font-size: 0.7rem;
  }
  
  .post-date {
    color: var(--blog-bronze);
    font-weight: 500;
    font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Display', 'SF Pro Text', system-ui, sans-serif;
  }
  
  .reading-time {
    color: var(--blog-muted-gold);
    font-style: italic;
  }
  
  .post-title {
    font-size: 2.5rem;
    line-height: 1.2;
    color: var(--text-primary);
    font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Display', 'SF Pro Text', system-ui, sans-serif;
    font-weight: 700;
    margin-bottom: 1rem;
    letter-spacing: -0.5px;
  }
  
  .post-description {
    font-size: 1.125rem;
    color: var(--text-secondary);
    line-height: 1.6;
    margin-bottom: 1.5rem;
    font-style: italic;
  }
  
  .post-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }
  
  .post-tag {
    background: #C62828;
    color: #FFFFFF;
    border: 1px solid #C62828;
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    font-weight: 500;
    letter-spacing: 0.3px;
    text-decoration: none;
    transition: all 0.2s ease;
    display: inline-block;
  }
  
  .post-tag:hover {
    background: #8B0000;
    color: #FFFFFF;
    border-color: #8B0000;
    transform: translateY(-1px);
  }
  
  .updated-notice {
    color: var(--blog-muted-gold);
    font-size: 0.875rem;
    margin-top: 1rem;
  }
  
  .post-content {
    line-height: 1.8;
    color: var(--text-primary);
  }
  
  .post-content h2 {
    font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Display', 'SF Pro Text', system-ui, sans-serif;
    color: var(--text-primary);
    font-size: 1.75rem;
    margin: 2.5rem 0 1rem 0;
    font-weight: 600;
  }
  
  .post-content h3 {
    font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Display', 'SF Pro Text', system-ui, sans-serif;
    color: var(--text-primary);
    font-size: 1.375rem;
    margin: 2rem 0 0.75rem 0;
    font-weight: 600;
  }
  
  .post-content p {
    margin-bottom: 1.5rem;
    color: var(--text-primary);
  }
  
  .post-content a {
    color: var(--blog-bronze);
    border-bottom: 1px solid var(--blog-bronze);
    transition: all 0.3s ease;
  }
  
  .post-content a:hover {
    color: var(--blog-sepia);
    border-bottom-color: var(--blog-sepia);
  }
  
  .post-content blockquote {
    border-left: 3px solid var(--blog-bronze);
    padding-left: 1.5rem;
    margin: 2rem 0;
    font-style: italic;
    color: var(--blog-sepia);
    background: var(--blog-parchment);
    padding: 1.5rem;
  }
  
  .post-content code {
    background: var(--blog-parchment);
    padding: 0.25rem 0.5rem;
    border-radius: 3px;
    font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
    font-size: 0.875rem;
    color: var(--blog-sepia);
  }
  
  .post-content pre {
    background: var(--blog-parchment);
    padding: 1.5rem;
    border-radius: 6px;
    overflow-x: auto;
    margin: 1.5rem 0;
    border: 1px solid var(--border-light);
  }

  /* Override Astro code block styling to match theme */
  .post-content .astro-code {
    background: var(--blog-parchment) !important;
    color: var(--blog-charcoal) !important;
    border: 1px solid var(--border-light);
  }

  .post-content .astro-code span {
    color: var(--blog-charcoal) !important;
  }
  
  .post-content ul,
  .post-content ol {
    margin: 1.5rem 0;
    padding-left: 2rem;
  }
  
  .post-content li {
    margin-bottom: 0.5rem;
    color: var(--blog-charcoal);
  }
  
  /* Embed styling */
  .post-content iframe {
    max-width: 100%;
    border-radius: 12px;
    margin: 1.5rem 0;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }
  
  .post-content img {
    max-width: 100%;
    height: auto;
    border-radius: 8px;
    margin: 1.5rem 0;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }
  
  /* Responsive embed containers */
  .post-content .youtube-embed,
  .post-content .vimeo-embed,
  .post-content .tweet-embed {
    margin: 2rem 0;
  }
  
  /* URL overflow prevention */
  .post-content a {
    word-break: break-word;
    overflow-wrap: break-word;
    hyphens: auto;
  }
  
  /* Long code snippets */
  .post-content code {
    word-break: break-word;
    overflow-wrap: break-word;
  }
  
  /* Title overflow prevention */
  .post-title {
    word-break: break-word;
    overflow-wrap: break-word;
    hyphens: auto;
  }
  
  /* Subtitle overflow prevention */
  .post-content h2,
  .post-content h3,
  .post-content h4 {
    word-break: break-word;
    overflow-wrap: break-word;
    hyphens: auto;
  }
  
  .post-footer {
    border-top: 1px solid var(--border-light);
    padding-top: 2rem;
    margin-top: 3rem;
  }
  
  .author-info {
    margin-bottom: 2rem;
  }
  
  .author-info strong {
    color: var(--blog-charcoal);
    font-size: 1.125rem;
  }
  
  .author-link {
    color: var(--blog-charcoal);
    text-decoration: none;
    border-bottom: 1px solid transparent;
    transition: all 0.3s ease;
  }
  
  .author-link:hover {
    color: var(--blog-bronze);
    border-bottom-color: var(--blog-bronze);
  }
  
  .author-info p {
    color: var(--blog-sepia);
    margin-top: 0.5rem;
    font-style: italic;
  }
  
  .post-actions {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: 1rem;
  }
  
  .back-to-blog {
    color: var(--blog-bronze);
    font-weight: 500;
    text-decoration: none;
    transition: color 0.3s ease;
  }
  
  .back-to-blog:hover {
    color: var(--blog-sepia);
  }
  
  .post-sidebar {
    max-width: 400px;
    margin: 0 auto;
  }
  
  .newsletter-cta {
    background: var(--blog-parchment);
    padding: 2rem;
    border: 1px solid var(--border-light);
    text-align: center;
  }
  
  .newsletter-cta h3 {
    color: var(--blog-charcoal);
    margin-bottom: 1rem;
    font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Display', 'SF Pro Text', system-ui, sans-serif;
  }
  
  .newsletter-cta p {
    color: var(--blog-sepia);
    margin-bottom: 1.5rem;
  }
  
  @media (max-width: 768px) {
    .blog-post {
      padding: 2rem 1.5rem;
    }
    
    .post-title {
      font-size: 2rem;
    }
    
    .post-meta {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }
    
    .post-actions {
      justify-content: center;
    }
  }

  /* Reading Progress Bar */
  .reading-progress {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 3px;
    background: rgba(0, 0, 0, 0.1);
    z-index: 1000;
  }

  .reading-progress-bar {
    height: 100%;
    background: var(--color-primary);
    width: 0%;
    transition: width 0.1s ease;
  }

  /* Table of Contents */
  .table-of-contents {
    position: fixed;
    left: 2rem;
    top: 20%;
    width: 240px;
    max-height: 60vh;
    overflow-y: auto;
    background: var(--card-bg);
    border: 1px solid var(--border-light);
    border-radius: 8px;
    padding: 1.5rem;
    z-index: 100;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    box-shadow: 0 4px 12px var(--card-shadow);
  }

  .table-of-contents.visible {
    opacity: 1;
    visibility: visible;
  }

  .table-of-contents h3 {
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 1rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    border-bottom: 1px solid var(--border-light);
    padding-bottom: 0.5rem;
  }

  .toc-nav {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .toc-nav a {
    display: block;
    color: var(--text-secondary);
    text-decoration: none;
    font-size: 0.8rem;
    line-height: 1.5;
    padding: 0.4rem 0;
    border-left: 3px solid transparent;
    padding-left: 0.75rem;
    margin-bottom: 0.25rem;
    transition: all 0.2s ease;
    border-radius: 0 4px 4px 0;
  }

  .toc-nav a:hover {
    color: var(--color-primary);
    border-left-color: var(--color-primary);
    background: var(--bg-tertiary);
  }

  .toc-nav a.active {
    color: var(--color-primary);
    border-left-color: var(--color-primary);
    font-weight: 600;
    background: var(--bg-tertiary);
  }

  .toc-nav .toc-h3 {
    margin-left: 1rem;
    font-size: 0.75rem;
  }

  .toc-nav .toc-h4 {
    margin-left: 2rem;
    font-size: 0.7rem;
  }

  /* Hide TOC on smaller screens and tablets */
  @media (max-width: 1400px) {
    .table-of-contents {
      display: none;
    }
  }

  /* Container layout for blog posts */
  .container {
    position: relative;
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  /* Ensure main content is properly centered */
  .blog-post {
    width: 100%;
    max-width: 800px;
  }

  .post-sidebar {
    width: 100%;
    max-width: 400px;
  }
</style>

<script>
  // Reading Progress Bar
  function updateReadingProgress() {
    const article = document.querySelector('.blog-post');
    const progressBar = document.querySelector('.reading-progress-bar');
    
    if (!article || !progressBar) return;
    
    const articleTop = article.offsetTop;
    const articleHeight = article.offsetHeight;
    const windowHeight = window.innerHeight;
    const scrollTop = window.pageYOffset;
    
    const articleBottom = articleTop + articleHeight - windowHeight;
    const progress = Math.max(0, Math.min(100, ((scrollTop - articleTop) / (articleBottom - articleTop)) * 100));
    
    progressBar.style.width = progress + '%';
  }

  // Table of Contents Generation
  function generateTableOfContents() {
    const headings = document.querySelectorAll('.post-content h2, .post-content h3, .post-content h4');
    const tocNav = document.getElementById('toc-nav');
    const toc = document.querySelector('.table-of-contents');
    
    if (!headings.length || !tocNav || !toc) return;
    
    // Generate IDs for headings if they don't have them
    headings.forEach((heading, index) => {
      if (!heading.id) {
        heading.id = `heading-${index}`;
      }
    });
    
    // Create TOC links safely (XSS protection)
    const fragment = document.createDocumentFragment();
    headings.forEach((heading) => {
      const level = heading.tagName.toLowerCase();
      const text = heading.textContent || '';
      const id = heading.id;
      
      const link = document.createElement('a');
      link.href = `#${id}`;
      link.className = `toc-${level}`;
      link.setAttribute('data-heading', id);
      link.textContent = text; // Safe text insertion, prevents XSS
      
      fragment.appendChild(link);
    });
    
    tocNav.appendChild(fragment);
    
    // Show TOC if there are headings
    if (headings.length > 1) {
      toc.classList.add('visible');
    }
    
    // Handle TOC link clicks
    tocNav.addEventListener('click', (e) => {
      if (e.target.tagName === 'A') {
        e.preventDefault();
        const targetId = e.target.getAttribute('href').substring(1);
        const targetElement = document.getElementById(targetId);
        
        if (targetElement) {
          targetElement.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }
      }
    });
  }

  // Highlight active TOC section
  function updateActiveTOCSection() {
    const headings = document.querySelectorAll('.post-content h2, .post-content h3, .post-content h4');
    const tocLinks = document.querySelectorAll('.toc-nav a');
    
    let activeHeading = null;
    
    headings.forEach((heading) => {
      const rect = heading.getBoundingClientRect();
      if (rect.top <= 100) {
        activeHeading = heading;
      }
    });
    
    // Remove active class from all links
    tocLinks.forEach(link => link.classList.remove('active'));
    
    // Add active class to current section
    if (activeHeading) {
      const activeLink = document.querySelector(`[data-heading="${activeHeading.id}"]`);
      if (activeLink) {
        activeLink.classList.add('active');
      }
    }
  }

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', () => {
    generateTableOfContents();
    updateReadingProgress();
    updateActiveTOCSection();
  });

  // Update on scroll
  window.addEventListener('scroll', () => {
    updateReadingProgress();
    updateActiveTOCSection();
  });
</script>