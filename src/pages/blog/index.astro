---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';

// Helper function to parse dates consistently in Istanbul timezone
const parseIstanbulDate = (dateString) => {
  // Handle non-string values
  if (typeof dateString !== 'string') {
    return new Date(dateString);
  }
  // If it's just a date (YYYY-MM-DD), append Istanbul timezone
  if (dateString.match(/^\d{4}-\d{2}-\d{2}$/)) {
    return new Date(dateString + 'T00:00:00+03:00');
  }
  // For datetime strings, parse as-is but assume they're in Istanbul time
  return new Date(dateString);
};

const allBlogPosts = await getCollection('blog', ({ data }) => {
  // Don't show draft posts
  if (data.draft) return false;
  
  // Allow posts with dates up to 1 day in the future (for timezone issues)
  const publishDate = parseIstanbulDate(data.publishDate);
  const now = new Date();
  const oneDayFromNow = new Date(now.getTime() + 24 * 60 * 60 * 1000);
  
  // Only filter out posts that are more than 1 day in the future
  return publishDate <= oneDayFromNow;
});

// Sort by publish date (newest first) using Istanbul timezone parsing
const sortedPosts = allBlogPosts.sort((a, b) => 
  parseIstanbulDate(b.data.publishDate).getTime() - parseIstanbulDate(a.data.publishDate).getTime()
);

// Show all posts in chronological order (newest first)
const allPosts = sortedPosts;

// For initial display, show only first 20 posts
const initialPosts = allPosts.slice(0, 20);
const remainingPosts = allPosts.slice(20);
---

<Layout title="Blog - Thoughts on Finance, Art & Code" description="Exploring the intersection of financial markets, creative coding, and artistic expression through data-driven insights and technical analysis.">
  <main class="blog-container">
    <header class="blog-header">
      <h1>Journal</h1>
      <div class="blog-nav">
        <a href="/topics" class="nav-button">Browse by Topics â†’</a>
        <a href="/archive" class="nav-button">Browse Archive â†’</a>
        <a href="/rss.xml" class="rss-button" target="_blank" rel="noopener noreferrer">
          <span class="rss-icon">ðŸ“¡</span>
          RSS Feed
        </a>
      </div>
      <p class="blog-subtitle">
        Thoughts on the intersection of finance, art, and code â€” where data meets creativity and markets become canvases.
      </p>
    </header>

    <div class="blog-layout">
      <section class="blog-main">
        <h2>All Posts</h2>
        <div class="articles-list" id="articles-list">
          {initialPosts.map(post => (
            <article class="article-item">
              <div class="article-line">
                <div class="article-main">
                  <a href={`/blog/${post.slug}`} class="article-title">
                    {post.data.title}
                  </a>
                  <time class="article-date">
                    {parseIstanbulDate(post.data.publishDate).toLocaleDateString('en-US', {
                      month: 'short',
                      day: 'numeric',
                      year: 'numeric',
                      timeZone: 'Europe/Istanbul'
                    })}
                  </time>
                </div>
                {post.data.tags && post.data.tags.length > 0 && (
                  <div class="article-tags">
                    {post.data.tags.slice(0, 4).map(tag => (
                      <a href={`/topics/${tag.toLowerCase().replace(/\s+/g, '-')}`} class="article-tag">
                        {tag}
                      </a>
                    ))}
                  </div>
                )}
              </div>
            </article>
          ))}
        </div>
        
        {remainingPosts.length > 0 && (
          <div class="load-more-container">
            <button id="load-more-btn" class="load-more-btn">
              Load More Posts ({remainingPosts.length} remaining)
            </button>
          </div>
        )}
        
        {/* Hidden data for JavaScript */}
        <script id="remaining-posts-data" type="application/json" set:html={JSON.stringify(remainingPosts.map(post => ({
          slug: post.slug,
          title: post.data.title,
          excerpt: post.data.excerpt || post.data.description,
          publishDate: post.data.publishDate,
          readingTime: post.data.readingTime,
          tags: post.data.tags || []
        })))} />
      </section>
    </div>
  </main>
</Layout>

<style>
  .blog-container {
    max-width: 900px;
    margin: 0 auto;
    padding: 2rem 1rem;
    min-height: calc(100vh - 70px);
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
  }

  .blog-header {
    text-align: left;
    margin-bottom: 3rem;
    border-bottom: 1px solid var(--border-light);
    padding-bottom: 2rem;
  }

  .blog-header h1 {
    font-size: 2rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 1rem;
  }

  .blog-nav {
    margin: 1rem 0;
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .nav-button {
    color: var(--color-primary);
    text-decoration: none;
    font-weight: 500;
    font-size: 0.95rem;
    transition: all 0.2s ease;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    border: 1px solid var(--color-primary);
    border-radius: 6px;
  }

  .nav-button:hover {
    background: var(--color-primary);
    color: white;
    transform: translateY(-1px);
  }

  .rss-button {
    color: white;
    background: #FF8C00;
    text-decoration: none;
    font-weight: 500;
    font-size: 0.95rem;
    transition: all 0.2s ease;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    border: 1px solid #FF8C00;
    border-radius: 6px;
  }

  .rss-button:hover {
    background: #FF4500;
    border-color: #FF4500;
    transform: translateY(-1px);
  }

  .rss-icon {
    font-size: 0.95rem;
  }

  .blog-subtitle {
    font-size: 0.95rem;
    color: var(--text-secondary);
    line-height: 1.5;
    margin-top: 0.5rem;
  }
  
  .blog-layout {
    margin-top: 2rem;
  }
  
  .blog-main h2 {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 1.5rem;
    border-bottom: 1px solid var(--border-light);
    padding-bottom: 0.75rem;
  }
  
  .articles-list {
    padding: 0;
  }

  .article-item {
    margin: 0;
    padding: 0;
  }

  .article-line {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0.75rem 1rem;
    margin: 0.25rem 0;
    border-radius: 4px;
    transition: background-color 0.2s ease;
    gap: 1rem;
    border-bottom: 1px solid var(--border-light);
  }

  .article-line:hover {
    background: rgba(0, 0, 0, 0.02);
  }

  .article-main {
    display: flex;
    align-items: center;
    gap: 1rem;
    flex: 1;
    min-width: 0;
  }

  .article-title {
    color: var(--text-primary);
    text-decoration: none;
    font-size: 0.95rem;
    font-weight: 400;
    line-height: 1.4;
    transition: color 0.2s ease;
    border-bottom: 1px dotted var(--text-muted);
    flex: 1;
    min-width: 0;
  }

  .article-title:hover {
    color: var(--color-primary);
    border-bottom-color: var(--color-primary);
  }

  .article-date {
    color: var(--text-muted);
    font-size: 0.8rem;
    font-weight: 400;
    white-space: nowrap;
    flex-shrink: 0;
  }

  .article-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0;
    align-items: center;
    flex-shrink: 0;
  }

  .article-tag {
    color: #FF8C00;
    font-size: 0.75rem;
    font-weight: 400;
    text-decoration: none;
    transition: color 0.2s ease;
  }

  .article-tag:hover {
    color: #FF4500;
  }

  .article-tag:not(:last-child)::after {
    content: ", ";
    color: var(--text-muted);
  }

  .load-more-container {
    text-align: center;
    margin-top: 2rem;
    padding-top: 2rem;
    border-top: 1px solid var(--border-light);
  }

  .load-more-btn {
    background: var(--color-primary);
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    font-size: 0.95rem;
    font-weight: 500;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .load-more-btn:hover {
    background: var(--color-primary-hover);
    transform: translateY(-1px);
  }

  @media (max-width: 768px) {
    .blog-container {
      padding: 1.5rem 1rem;
    }
    
    .blog-header h1 {
      font-size: 1.75rem;
    }

    .article-line {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
      padding: 1rem;
    }

    .article-main {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.25rem;
      width: 100%;
    }

    .article-title {
      border-bottom: none;
      margin-bottom: 0.25rem;
    }

    .article-date {
      font-size: 0.75rem;
    }

    .article-tags {
      align-self: stretch;
    }
  }

  @media (max-width: 480px) {
    .blog-container {
      padding: 1rem 0.75rem;
    }
    
    .blog-header h1 {
      font-size: 1.5rem;
    }

    .article-line {
      padding: 0.75rem;
    }

    .blog-nav {
      flex-direction: column;
      gap: 0.5rem;
    }

    .nav-button,
    .rss-button {
      text-align: center;
      justify-content: center;
    }
  }
</style>

<script>
  // Load More functionality
  document.addEventListener('DOMContentLoaded', function() {
    const loadMoreBtn = document.getElementById('load-more-btn');
    const articlesGrid = document.getElementById('articles-grid');
    
    if (!loadMoreBtn || !articlesGrid) return;
    
    // Store remaining posts data from server-side
    const remainingPostsData = JSON.parse(document.getElementById('remaining-posts-data')?.textContent || '[]');
    
    let currentIndex = 0;
    const postsPerLoad = 20;
    
    loadMoreBtn.addEventListener('click', function() {
      // Show loading state
      loadMoreBtn.classList.add('loading');
      (loadMoreBtn as HTMLButtonElement).disabled = true;
      
      // Simulate loading delay for better UX
      setTimeout(() => {
        const postsToLoad = remainingPostsData.slice(currentIndex, currentIndex + postsPerLoad);
        
        postsToLoad.forEach((post: any) => {
          const articleElement = createArticleElement(post);
          articlesGrid.appendChild(articleElement);
        });
        
        currentIndex += postsPerLoad;
        
        // Update button text or hide if no more posts
        if (currentIndex >= remainingPostsData.length) {
          loadMoreBtn.style.display = 'none';
        } else {
          const remaining = remainingPostsData.length - currentIndex;
          loadMoreBtn.textContent = `Load More Posts (${remaining} remaining)`;
        }
        
        // Remove loading state
        loadMoreBtn.classList.remove('loading');
        (loadMoreBtn as HTMLButtonElement).disabled = false;
      }, 300);
    });
    
    function createArticleElement(post: any) {
      const article = document.createElement('article');
      article.className = 'article-card';
      
      const publishDate = new Date(post.publishDate);
      const formattedDate = publishDate.toLocaleDateString('en-US', {
        month: 'short',
        day: 'numeric',
        year: 'numeric',
        timeZone: 'Europe/Istanbul'
      });
      
      // Create article meta
      const articleMeta = document.createElement('div');
      articleMeta.className = 'article-meta';
      const timeElement = document.createElement('time');
      timeElement.className = 'article-date';
      timeElement.textContent = formattedDate;
      // Force the correct color styling for date
      timeElement.style.color = 'var(--text-muted)';
      articleMeta.appendChild(timeElement);
      
      // Create article title with proper styling
      const titleElement = document.createElement('h3');
      titleElement.className = 'article-title';
      const linkElement = document.createElement('a');
      linkElement.href = `/blog/${post.slug}`;
      linkElement.textContent = post.title;
      // Force the correct color styling
      linkElement.style.color = 'var(--text-primary)';
      linkElement.style.textDecoration = 'none';
      titleElement.appendChild(linkElement);
      
      // Create article excerpt
      const excerptElement = document.createElement('p');
      excerptElement.className = 'article-excerpt';
      excerptElement.textContent = post.excerpt;
      // Force the correct color styling
      excerptElement.style.color = 'var(--text-secondary)';
      
      // Create tags section if tags exist
      let tagsElement = null;
      if (post.tags && post.tags.length > 0) {
        tagsElement = document.createElement('div');
        tagsElement.className = 'article-tags';
        
        const tagsToShow = post.tags.slice(0, 3);
        tagsToShow.forEach((tag, index) => {
          const tagLink = document.createElement('a');
          tagLink.href = `/topics/${tag.toLowerCase().replace(/\s+/g, '-')}`;
          tagLink.className = 'article-tag';
          tagLink.textContent = tag;
          tagLink.style.color = 'var(--text-muted)';
          tagsElement.appendChild(tagLink);
        });
        
        if (post.tags.length > 3) {
          const moreTagsSpan = document.createElement('span');
          moreTagsSpan.className = 'more-tags';
          moreTagsSpan.textContent = `+${post.tags.length - 3}`;
          moreTagsSpan.style.color = 'var(--text-muted)';
          tagsElement.appendChild(moreTagsSpan);
        }
      }
      
      // Assemble the article
      article.appendChild(articleMeta);
      article.appendChild(titleElement);
      article.appendChild(excerptElement);
      
      // Add tags if they exist
      if (tagsElement) {
        article.appendChild(tagsElement);
      }
      
      // Add reading time if present
      if (post.readingTime) {
        const readingTimeElement = document.createElement('span');
        readingTimeElement.className = 'reading-time';
        readingTimeElement.textContent = `${post.readingTime} min read`;
        readingTimeElement.style.color = 'var(--text-muted)';
        article.appendChild(readingTimeElement);
      }
      
      return article;
    }
  });
</script>