---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import ArchiveDropdown from '../../components/ArchiveDropdown.astro';

// Helper function to parse dates consistently in Istanbul timezone
const parseIstanbulDate = (dateString) => {
  // Handle non-string values
  if (typeof dateString !== 'string') {
    return new Date(dateString);
  }
  // If it's just a date (YYYY-MM-DD), append Istanbul timezone
  if (dateString.match(/^\d{4}-\d{2}-\d{2}$/)) {
    return new Date(dateString + 'T00:00:00+03:00');
  }
  // For datetime strings, parse as-is but assume they're in Istanbul time
  return new Date(dateString);
};

const allBlogPosts = await getCollection('blog', ({ data }) => {
  // Don't show draft posts
  if (data.draft) return false;
  
  // Allow posts with dates up to 1 day in the future (for timezone issues)
  const publishDate = parseIstanbulDate(data.publishDate);
  const now = new Date();
  const oneDayFromNow = new Date(now.getTime() + 24 * 60 * 60 * 1000);
  
  // Only filter out posts that are more than 1 day in the future
  return publishDate <= oneDayFromNow;
});

// Sort by publish date (newest first) using Istanbul timezone parsing
const sortedPosts = allBlogPosts.sort((a, b) => 
  parseIstanbulDate(b.data.publishDate).getTime() - parseIstanbulDate(a.data.publishDate).getTime()
);

// Show all posts in chronological order (newest first)
const allPosts = sortedPosts;

// For initial display, show only first 20 posts
const initialPosts = allPosts.slice(0, 20);
const remainingPosts = allPosts.slice(20);
---

<Layout title="Blog - Thoughts on Finance, Art & Code" description="Exploring the intersection of financial markets, creative coding, and artistic expression through data-driven insights and technical analysis.">
  <main class="blog-container">
    <header class="blog-header">
      <h1>Journal</h1>
      <div class="blog-nav">
        <a href="/topics" class="topics-link">Browse by Topics →</a>
      </div>
      <p class="blog-subtitle">
        Thoughts on the intersection of finance, art, and code — where data meets creativity and markets become canvases.
      </p>
    </header>

    <div class="blog-layout">
      <section class="blog-main">
        <div class="archive-section">
          <ArchiveDropdown />
        </div>
        <h2>All Posts</h2>
        <div class="articles-grid" id="articles-grid">
          {initialPosts.map(post => (
            <article class="article-card">
              <div class="article-meta">
                <time class="article-date">
                  {parseIstanbulDate(post.data.publishDate).toLocaleDateString('en-US', {
                    month: 'short',
                    day: 'numeric',
                    year: 'numeric',
                    timeZone: 'Europe/Istanbul'
                  })}
                </time>
              </div>
              <h3 class="article-title">
                <a href={`/blog/${post.slug}`}>
                  {post.data.title}
                </a>
              </h3>
              <p class="article-excerpt">
                {post.data.excerpt || post.data.description}
              </p>
              {post.data.readingTime && (
                <span class="reading-time">{post.data.readingTime} min read</span>
              )}
            </article>
          ))}
        </div>
        
        {remainingPosts.length > 0 && (
          <div class="load-more-container">
            <button id="load-more-btn" class="load-more-btn">
              Load More Posts ({remainingPosts.length} remaining)
            </button>
          </div>
        )}
        
        {/* Hidden data for JavaScript */}
        <script id="remaining-posts-data" type="application/json" set:html={JSON.stringify(remainingPosts.map(post => ({
          slug: post.slug,
          title: post.data.title,
          excerpt: post.data.excerpt || post.data.description,
          publishDate: post.data.publishDate,
          readingTime: post.data.readingTime
        })))} />
      </section>
    </div>
  </main>
</Layout>

<style>
  .blog-container {
    max-width: 90%;
    width: 100%;
    margin: 0 auto;
    padding: 2rem 1rem;
    min-height: calc(100vh - 70px);
    box-sizing: border-box;
    overflow-x: hidden;
  }
  
  /* Responsive blog container for optimal reading */
  @media (min-width: 768px) {
    .blog-container {
      max-width: 750px;
      padding: 2rem 1.5rem;
    }
  }
  
  @media (min-width: 1024px) {
    .blog-container {
      max-width: 900px;
      padding: 2.5rem 2rem;
    }
  }
  
  @media (min-width: 1200px) {
    .blog-container {
      max-width: 1000px;
      padding: 3rem 2rem;
    }
  }

  .blog-header {
    text-align: center;
    margin-bottom: 2rem;
  }

  .blog-nav {
    margin: 1rem 0;
  }

  .topics-link {
    color: var(--color-primary);
    text-decoration: none;
    font-weight: 600;
    font-size: 1.1rem;
    transition: all 0.2s ease;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    border: 2px solid var(--color-primary);
    border-radius: 6px;
  }

  .topics-link:hover {
    background: var(--color-primary);
    color: white;
    transform: translateY(-1px);
  }
  
  .blog-layout {
    margin-top: 2rem;
  }
  
  .blog-main {
    min-width: 0; /* Prevents overflow issues */
  }
  
  .archive-section {
    margin-bottom: 3rem;
    padding-bottom: 2rem;
    border-bottom: 1px solid var(--border-light);
  }
  
  .blog-main h2 {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 2rem;
  }
  
  .articles-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 1.5rem;
  }
  
  /* Force single column on smaller screens to prevent overflow */
  @media (max-width: 640px) {
    .articles-grid {
      grid-template-columns: 1fr !important;
    }
  }
  
  .article-card {
    background: var(--card-bg);
    border: 2px solid var(--card-border);
    border-radius: 12px;
    padding: 2rem;
    transition: all 0.3s ease;
    position: relative;
  }
  
  .article-card:hover {
    border-color: var(--color-primary);
    transform: translateY(-2px);
    box-shadow: 0 8px 25px var(--card-shadow);
  }
  
  .article-meta {
    margin-bottom: 1rem;
  }
  
  .article-date {
    color: var(--text-muted);
    font-size: 0.875rem;
    font-weight: 500;
  }
  
  /* Blog index specific styles - override global blog styles */
  .articles-grid .article-title {
    margin: 0 0 1rem 0;
    font-size: 1.375rem;
    line-height: 1.3;
    font-weight: 700;
    color: var(--text-primary) !important;
  }
  
  .articles-grid .article-title a {
    color: var(--text-primary) !important;
    text-decoration: none;
    transition: color 0.3s ease;
  }
  
  .articles-grid .article-title a:hover {
    color: var(--color-primary) !important;
  }
  
  .articles-grid .article-excerpt {
    color: var(--text-secondary) !important;
    font-size: 1rem;
    line-height: 1.6;
    margin-bottom: 1rem;
  }
  
  /* Ensure dynamically loaded articles get the same styling */
  .articles-grid .article-card .article-title {
    color: var(--text-primary) !important;
  }
  
  .articles-grid .article-card .article-title a {
    color: var(--text-primary) !important;
  }
  
  .articles-grid .article-card .article-excerpt {
    color: var(--text-secondary) !important;
  }
  
  .reading-time {
    color: var(--text-muted) !important;
    font-size: 0.875rem;
    font-style: italic;
  }
  
  .load-more-container {
    text-align: center;
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid var(--border-light);
  }
  
  .load-more-btn {
    background: var(--color-primary);
    color: var(--text-inverse);
    border: 2px solid var(--color-primary);
    padding: 1rem 2rem;
    border-radius: 8px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .load-more-btn:hover {
    background: var(--color-primary-hover);
    border-color: var(--color-primary-hover);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(102, 102, 102, 0.3);
  }
  
  .load-more-btn:focus {
    outline: 3px solid var(--border-focus);
    outline-offset: 2px;
  }
  
  .load-more-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }
  
  .load-more-btn.loading {
    position: relative;
    color: transparent;
  }
  
  .load-more-btn.loading::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 20px;
    height: 20px;
    border: 2px solid var(--text-inverse);
    border-radius: 50%;
    border-top-color: transparent;
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    to {
      transform: translate(-50%, -50%) rotate(360deg);
    }
  }
  

  
  
  /* Responsive design */
  @media (max-width: 1024px) {
    .archive-section {
      margin-bottom: 2rem;
      padding-bottom: 1.5rem;
    }
  }
  
  @media (max-width: 768px) {
    .blog-container {
      padding: 1.5rem 1rem;
      max-width: 100%;
      overflow-x: hidden;
    }
    
    .archive-section {
      margin-bottom: 2rem;
      padding-bottom: 1rem;
    }
    
    .load-more-container {
      margin-top: 2rem;
      padding-top: 1.5rem;
    }
    
    .load-more-btn {
      padding: 0.875rem 1.5rem;
      font-size: 0.95rem;
    }
    
    .articles-grid {
      grid-template-columns: 1fr !important;
      gap: 1.5rem;
      width: 100%;
    }
    
    .article-card {
      padding: 1.5rem;
      margin: 0;
      width: 100%;
      max-width: 100%;
      border-radius: 8px;
      box-sizing: border-box;
    }
    
    .article-title {
      font-size: 1.25rem;
      line-height: 1.3;
    }
    
    .article-excerpt {
      font-size: 0.95rem;
      line-height: 1.6;
    }
    
  }
  
  @media (max-width: 480px) {
    .blog-container {
      padding: 1rem 0.75rem;
      overflow-x: hidden;
    }
    
    .archive-section {
      margin-bottom: 1.5rem;
      padding-bottom: 1rem;
    }
    
    .load-more-container {
      margin-top: 1.5rem;
      padding-top: 1rem;
    }
    
    .load-more-btn {
      padding: 0.75rem 1.25rem;
      font-size: 0.9rem;
      width: 100%;
      max-width: 280px;
    }
    
    .articles-grid {
      grid-template-columns: 1fr !important;
      gap: 1rem;
      width: 100%;
      margin: 0;
    }
    
    .article-card {
      padding: 1.25rem;
      border-radius: 8px;
      width: 100%;
      margin: 0;
      max-width: 100%;
      box-sizing: border-box;
    }
    
    .article-title {
      font-size: 1.25rem;
      word-break: break-word;
      overflow-wrap: break-word;
    }
    
    .article-excerpt {
      word-break: break-word;
      overflow-wrap: break-word;
    }
    
    .blog-header h1 {
      font-size: 2rem;
    }
  }
</style>

<script>
  // Load More functionality
  document.addEventListener('DOMContentLoaded', function() {
    const loadMoreBtn = document.getElementById('load-more-btn');
    const articlesGrid = document.getElementById('articles-grid');
    
    if (!loadMoreBtn || !articlesGrid) return;
    
    // Store remaining posts data from server-side
    const remainingPostsData = JSON.parse(document.getElementById('remaining-posts-data')?.textContent || '[]');
    
    let currentIndex = 0;
    const postsPerLoad = 20;
    
    loadMoreBtn.addEventListener('click', function() {
      // Show loading state
      loadMoreBtn.classList.add('loading');
      (loadMoreBtn as HTMLButtonElement).disabled = true;
      
      // Simulate loading delay for better UX
      setTimeout(() => {
        const postsToLoad = remainingPostsData.slice(currentIndex, currentIndex + postsPerLoad);
        
        postsToLoad.forEach((post: any) => {
          const articleElement = createArticleElement(post);
          articlesGrid.appendChild(articleElement);
        });
        
        currentIndex += postsPerLoad;
        
        // Update button text or hide if no more posts
        if (currentIndex >= remainingPostsData.length) {
          loadMoreBtn.style.display = 'none';
        } else {
          const remaining = remainingPostsData.length - currentIndex;
          loadMoreBtn.textContent = `Load More Posts (${remaining} remaining)`;
        }
        
        // Remove loading state
        loadMoreBtn.classList.remove('loading');
        (loadMoreBtn as HTMLButtonElement).disabled = false;
      }, 300);
    });
    
    function createArticleElement(post: any) {
      const article = document.createElement('article');
      article.className = 'article-card';
      
      const publishDate = new Date(post.publishDate);
      const formattedDate = publishDate.toLocaleDateString('en-US', {
        month: 'short',
        day: 'numeric',
        year: 'numeric',
        timeZone: 'Europe/Istanbul'
      });
      
      // Create article meta
      const articleMeta = document.createElement('div');
      articleMeta.className = 'article-meta';
      const timeElement = document.createElement('time');
      timeElement.className = 'article-date';
      timeElement.textContent = formattedDate;
      articleMeta.appendChild(timeElement);
      
      // Create article title with proper styling
      const titleElement = document.createElement('h3');
      titleElement.className = 'article-title';
      const linkElement = document.createElement('a');
      linkElement.href = `/blog/${post.slug}`;
      linkElement.textContent = post.title;
      // Force the correct color styling
      linkElement.style.color = 'var(--text-primary)';
      linkElement.style.textDecoration = 'none';
      titleElement.appendChild(linkElement);
      
      // Create article excerpt
      const excerptElement = document.createElement('p');
      excerptElement.className = 'article-excerpt';
      excerptElement.textContent = post.excerpt;
      // Force the correct color styling
      excerptElement.style.color = 'var(--text-secondary)';
      
      // Assemble the article
      article.appendChild(articleMeta);
      article.appendChild(titleElement);
      article.appendChild(excerptElement);
      
      // Add reading time if present
      if (post.readingTime) {
        const readingTimeElement = document.createElement('span');
        readingTimeElement.className = 'reading-time';
        readingTimeElement.textContent = `${post.readingTime} min read`;
        readingTimeElement.style.color = 'var(--text-muted)';
        article.appendChild(readingTimeElement);
      }
      
      return article;
    }
  });
</script>