---
import Layout from '../../../layouts/Layout.astro';
import { getCollection } from 'astro:content';

export const prerender = true;

export async function getStaticPaths() {
  // Helper function to parse dates consistently in Istanbul timezone
  const parseIstanbulDate = (dateString) => {
    // Handle non-string values
    if (typeof dateString !== 'string') {
      return new Date(dateString);
    }
    // If it's just a date (YYYY-MM-DD), append Istanbul timezone
    if (dateString.match(/^\d{4}-\d{2}-\d{2}$/)) {
      return new Date(dateString + 'T00:00:00+03:00');
    }
    // For datetime strings, parse as-is but assume they're in Istanbul time
    return new Date(dateString);
  };
  const allPosts = await getCollection('blog', ({ data }) => {
    // Don't show draft posts
    if (data.draft) return false;
    
    // Allow posts with dates up to 1 day in the future (for timezone issues)
    const publishDate = parseIstanbulDate(data.publishDate);
    const now = new Date();
    const oneDayFromNow = new Date(now.getTime() + 24 * 60 * 60 * 1000);
    
    // Only filter out posts that are more than 1 day in the future
    return publishDate <= oneDayFromNow;
  });

  const monthYearCombos = [];

  allPosts.forEach(post => {
    const date = parseIstanbulDate(post.data.publishDate);
    const year = date.getFullYear();
    const monthName = date.toLocaleDateString('en-US', { month: 'long', timeZone: 'Europe/Istanbul' });
    
    const combo = `${year}-${monthName.toLowerCase()}`;
    if (!monthYearCombos.some(c => c.combo === combo)) {
      monthYearCombos.push({
        combo,
        year,
        monthName,
        monthLower: monthName.toLowerCase()
      });
    }
  });

  return monthYearCombos.map(({ year, monthName, monthLower }) => ({
    params: { 
      year: year.toString(), 
      month: monthLower
    },
    props: { 
      year,
      monthName,
      posts: allPosts
        .filter(post => {
          const date = parseIstanbulDate(post.data.publishDate);
          const postMonth = date.toLocaleDateString('en-US', { month: 'long', timeZone: 'Europe/Istanbul' });
          return date.getFullYear() === year && postMonth.toLowerCase() === monthLower;
        })
        .sort((a, b) => parseIstanbulDate(b.data.publishDate).getTime() - parseIstanbulDate(a.data.publishDate).getTime())
    },
  }));
}

const { year, monthName, posts } = Astro.props;

// Helper function to parse dates consistently in Istanbul timezone  
const parseIstanbulDate = (dateString) => {
  // Handle non-string values
  if (typeof dateString !== 'string') {
    return new Date(dateString);
  }
  // If it's just a date (YYYY-MM-DD), append Istanbul timezone
  if (dateString.match(/^\d{4}-\d{2}-\d{2}$/)) {
    return new Date(dateString + 'T00:00:00+03:00');
  }
  // For datetime strings, parse as-is but assume they're in Istanbul time
  return new Date(dateString);
};
---

<Layout title={`${monthName} ${year} Archive`} description={`All blog posts from ${monthName} ${year} - exploring finance, art, and technology.`}>
  <main class="container">
    <header class="archive-header">
      <div class="archive-breadcrumb">
        <a href="/blog">Journal</a> → 
        <a href="/archive">Archive</a> → 
        <a href={`/archive/${year}`}>{year}</a> → 
        <span>{monthName}</span>
      </div>
      
      <h1>Posts from {monthName} {year}</h1>
      <p class="archive-description">
        {posts.length} {posts.length === 1 ? 'post' : 'posts'} published in {monthName} {year}
      </p>
    </header>
    
    <section class="archive-posts">
      <div class="posts-list">
        {posts.map(post => (
          <article class="post-item">
            <div class="post-line">
              <time class="post-date">
                {parseIstanbulDate(post.data.publishDate).toLocaleDateString('en-CA', {
                  timeZone: 'Europe/Istanbul'
                }).split('-')[2]}
              </time>
              <a href={`/blog/${post.slug}`} class="post-title">
                {post.data.title}
              </a>
              {post.data.tags && post.data.tags.length > 0 && (
                <div class="post-tags">
                  {post.data.tags.sort((a, b) => a.localeCompare(b)).slice(0, 4).map((tag, index, array) => (
                    <a href={`/topics/${tag.toLowerCase().replace(/\s+/g, '-')}`} class="post-tag">{tag}</a>
                  ))}
                </div>
              )}
            </div>
          </article>
        ))}
      </div>
      
      {posts.length === 0 && (
        <div class="no-posts">
          <p>No posts found for {monthName} {year}.</p>
          <a href="/blog" class="back-to-blog">← Back to Journal</a>
        </div>
      )}
    </section>
    
    <footer class="archive-footer">
      <a href="/blog" class="back-to-blog">← Back to Journal</a>
      <a href={`/archive/${year}`} class="year-archive">View All {year} Posts →</a>
    </footer>
  </main>
</Layout>

<style>
  .container {
    max-width: 900px;
    margin: 0 auto;
    padding: 2rem 1rem;
    min-height: calc(100vh - 70px);
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
  }
  
  .archive-header {
    text-align: center;
    margin-bottom: 3rem;
    padding-bottom: 2rem;
    border-bottom: 1px solid var(--border-light);
    position: relative;
  }
  
  .archive-header::after {
    content: '';
    position: absolute;
    bottom: -1px;
    left: 50%;
    transform: translateX(-50%);
    width: 80px;
    height: 1px;
    background: var(--color-primary);
  }
  
  .archive-breadcrumb {
    margin-bottom: 1rem;
    font-size: 0.875rem;
    color: var(--text-muted);
  }
  
  .archive-breadcrumb a {
    color: var(--color-primary);
    text-decoration: none;
    font-weight: 500;
  }
  
  .archive-breadcrumb a:hover {
    text-decoration: underline;
  }
  
  .archive-header h1 {
    font-size: 2.5rem;
    color: var(--text-primary);
    margin-bottom: 1rem;
    font-weight: 700;
  }
  
  .archive-description {
    color: var(--text-muted);
    font-size: 1.125rem;
    margin: 0;
  }
  
  .posts-list {
    padding: 0;
    margin-bottom: 3rem;
  }

  .post-item {
    margin: 0;
    padding: 0;
  }

  .post-line {
    display: flex;
    align-items: baseline;
    gap: 1rem;
    padding: 0.5rem 0;
    transition: background-color 0.2s ease;
  }

  .post-line:hover {
    background: rgba(0, 0, 0, 0.02);
  }

  .post-date {
    color: var(--text-muted);
    font-size: 0.75rem;
    font-weight: 400;
    line-height: 1.4;
    white-space: nowrap;
    flex-shrink: 0;
    min-width: 30px;
    text-align: right;
  }

  .post-title {
    color: var(--text-primary);
    text-decoration: none;
    font-size: 0.85rem;
    font-weight: 400;
    line-height: 1.4;
    transition: color 0.2s ease;
    border-bottom: 1px dotted var(--text-muted);
    flex: 1;
    min-width: 0;
  }

  .post-title:hover {
    color: var(--color-primary);
    border-bottom-color: var(--color-primary);
  }

  .post-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    align-items: baseline;
    flex-shrink: 0;
    min-height: 1.4em;
  }

  .post-tag {
    color: white;
    background: #FF8C00;
    font-size: 0.7rem;
    font-weight: 500;
    text-decoration: none;
    transition: all 0.2s ease;
    line-height: 1.2;
    display: inline-flex;
    align-items: center;
    padding: 0.2rem 0.5rem;
    border-radius: 12px;
    border: 1px solid #FF8C00;
  }

  .post-tag:hover {
    background: #FF4500;
    border-color: #FF4500;
    transform: translateY(-1px);
  }
  
  .no-posts {
    text-align: center;
    padding: 3rem;
    color: var(--text-muted);
  }
  
  .archive-footer {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 2rem;
    padding-top: 2rem;
    border-top: 1px solid var(--border-light);
  }
  
  .back-to-blog,
  .year-archive {
    color: var(--color-primary);
    font-weight: 500;
    text-decoration: none;
    transition: color 0.3s ease;
  }
  
  .back-to-blog:hover,
  .year-archive:hover {
    color: var(--color-primary-hover);
  }
  
  @media (max-width: 768px) {
    .container {
      padding: 1.5rem 1rem;
    }
    
    .archive-header h1 {
      font-size: 2rem;
    }

    .post-line {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.25rem;
      padding: 0.5rem 0;
    }

    .post-date {
      font-size: 0.7rem;
      min-width: auto;
      text-align: left;
    }

    .post-title {
      border-bottom: none;
      width: 100%;
    }

    .post-tags {
      width: 100%;
    }
    
    .archive-footer {
      flex-direction: column;
      gap: 1rem;
    }
  }
  
  @media (max-width: 480px) {
    .container {
      padding: 1rem 0.75rem;
    }
    
    .archive-header h1 {
      font-size: 1.5rem;
    }

    .post-line {
      padding: 0.4rem 0;
    }

    .archive-breadcrumb {
      flex-wrap: wrap;
    }
  }
</style>