---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';

// Helper function to parse dates consistently in Istanbul timezone
const parseIstanbulDate = (dateString) => {
  // Handle non-string values
  if (typeof dateString !== 'string') {
    return new Date(dateString);
  }
  // If it's just a date (YYYY-MM-DD), append Istanbul timezone
  if (dateString.match(/^\d{4}-\d{2}-\d{2}$/)) {
    return new Date(dateString + 'T00:00:00+03:00');
  }
  // For datetime strings, parse as-is but assume they're in Istanbul time
  return new Date(dateString);
};

const allBlogPosts = await getCollection('blog', ({ data }) => {
  // Don't show draft posts
  if (data.draft) return false;
  
  // Allow posts with dates up to 1 day in the future (for timezone issues)
  const publishDate = parseIstanbulDate(data.publishDate);
  const now = new Date();
  const oneDayFromNow = new Date(now.getTime() + 24 * 60 * 60 * 1000);
  
  // Only filter out posts that are more than 1 day in the future
  return publishDate <= oneDayFromNow;
});

// Sort by publish date (newest first) using Istanbul timezone parsing
const sortedPosts = allBlogPosts.sort((a, b) => 
  parseIstanbulDate(b.data.publishDate).getTime() - parseIstanbulDate(a.data.publishDate).getTime()
);

// Group posts by year first, then by month
const postsByYear = {};
sortedPosts.forEach(post => {
  const date = parseIstanbulDate(post.data.publishDate);
  const year = date.getFullYear();
  const month = date.getMonth(); // 0-indexed
  
  if (!postsByYear[year]) {
    postsByYear[year] = {};
  }
  
  if (!postsByYear[year][month]) {
    postsByYear[year][month] = {
      monthName: date.toLocaleDateString('en-US', { month: 'long', timeZone: 'Europe/Istanbul' }),
      posts: []
    };
  }
  
  postsByYear[year][month].posts.push(post);
});

// Convert to sorted structure (newest year first, newest month first within each year)
const groupedPosts = Object.keys(postsByYear)
  .map(year => parseInt(year))
  .sort((a, b) => b - a)
  .map(year => ({
    year,
    months: Object.keys(postsByYear[year])
      .map(month => parseInt(month))
      .sort((a, b) => b - a)
      .map(month => ({
        month,
        monthName: postsByYear[year][month].monthName,
        posts: postsByYear[year][month].posts
      }))
  }));
---

<Layout title="Archive - Journal" description="Complete archive of all journal posts organized by year and month.">
  <main class="archive-container">
    <header class="archive-header">
      <h1>Journal Archive</h1>
      <p class="archive-subtitle">
        Complete collection of {allBlogPosts.length} posts exploring finance, art, technology, and culture.
      </p>
    </header>

    <div class="archive-content">
      {groupedPosts.map(({ year, months }) => (
        <section class="archive-year-section">
          <div class="year-header-collapsible">
            <h2 class="archive-year">{year}</h2>
            <button class="year-toggle-btn" data-year={year}>
              <span class="toggle-icon">▼</span>
            </button>
          </div>
          <div class="year-content" data-year-content={year}>
            {months.map(({ monthName, posts }) => (
              <section class="archive-month-section">
                <div class="month-header-collapsible">
                  <h3 class="archive-month">{monthName}</h3>
                  <button class="month-toggle-btn" data-month={`${year}-${monthName}`}>
                    <span class="toggle-icon">▼</span>
                  </button>
                </div>
                <div class="month-content" data-month-content={`${year}-${monthName}`}>
                  <div class="archive-grid">
                    {posts.map(post => (
                  <article class="archive-card">
                    <div class="archive-card-header">
                      <time class="archive-date">
                        {parseIstanbulDate(post.data.publishDate).toLocaleDateString('en-US', {
                          year: 'numeric',
                          month: 'short',
                          day: 'numeric',
                          timeZone: 'Europe/Istanbul'
                        })}
                      </time>
                      {post.data.readingTime && (
                        <span class="archive-reading-time">{post.data.readingTime} min</span>
                      )}
                    </div>
                    
                    <h4 class="archive-title">
                      <a href={`/blog/${post.slug}`}>
                        {post.data.title}
                      </a>
                    </h4>
                    
                    <p class="archive-excerpt">
                      {post.data.excerpt || post.data.description}
                    </p>
                    
                    {post.data.tags.length > 0 && (
                      <div class="archive-tags">
                        {post.data.tags.slice(0, 3).map(tag => (
                          <a href={`/topics/${tag.toLowerCase().replace(/\s+/g, '-')}`} class="archive-tag">
                            {tag}
                          </a>
                        ))}
                        {post.data.tags.length > 3 && (
                          <span class="more-tags">+{post.data.tags.length - 3}</span>
                        )}
                      </div>
                    )}
                    </article>
                  ))}
                  </div>
                </div>
              </section>
            ))}
          </div>
        </section>
      ))}
    </div>
    
    <footer class="archive-footer">
      <a href="/blog" class="back-to-journal">← Back to Journal</a>
    </footer>
  </main>
</Layout>

<style>
  .archive-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
    min-height: calc(100vh - 70px);
  }

  .archive-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  .archive-header h1 {
    font-size: 3rem;
    font-weight: 700;
    color: var(--text-primary);
    margin-bottom: 1rem;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
  }

  .archive-subtitle {
    font-size: 1.125rem;
    color: var(--text-secondary);
    line-height: 1.6;
    max-width: 600px;
    margin: 0 auto;
  }

  .archive-content {
    margin-bottom: 3rem;
  }

  .archive-year-section {
    margin-bottom: 4rem;
  }

  .year-header-collapsible {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    cursor: pointer;
  }

  .archive-year {
    font-size: 2rem;
    font-weight: 700;
    color: var(--text-primary);
    border-bottom: 2px solid var(--color-primary);
    padding-bottom: 0.5rem;
    margin: 0;
    flex: 1;
  }

  .year-toggle-btn,
  .month-toggle-btn {
    background: none;
    border: none;
    cursor: pointer;
    color: var(--color-primary);
    font-size: 1rem;
    padding: 0.5rem;
    border-radius: 6px;
    transition: all 0.2s ease;
    margin-left: 1rem;
  }

  .year-toggle-btn:hover,
  .month-toggle-btn:hover {
    background: rgba(102, 102, 102, 0.1);
    transform: scale(1.05);
  }

  .toggle-icon {
    transition: transform 0.3s ease;
  }

  .year-toggle-btn.expanded .toggle-icon,
  .month-toggle-btn.expanded .toggle-icon {
    transform: rotate(180deg);
  }

  .year-content {
    max-height: 1000px;
    overflow: hidden;
    transition: max-height 0.4s ease;
  }

  .year-content.collapsed {
    max-height: 0;
  }

  .archive-month-section {
    margin-bottom: 3rem;
    margin-left: 1rem;
  }

  .month-header-collapsible {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    cursor: pointer;
  }

  .archive-month {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-secondary);
    margin: 0;
    flex: 1;
  }

  .month-content {
    max-height: 1000px;
    overflow: hidden;
    transition: max-height 0.4s ease;
  }

  .month-content.collapsed {
    max-height: 0;
  }

  .archive-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 1.5rem;
    padding-bottom: 2rem;
    border-bottom: 1px solid var(--border-light);
    margin-bottom: 1rem;
  }

  .archive-card {
    background: var(--card-bg);
    border: 2px solid var(--card-border);
    border-radius: 8px;
    padding: 1.5rem;
    transition: all 0.3s ease;
    position: relative;
  }

  .archive-card:hover {
    border-color: var(--color-primary);
    transform: translateY(-2px);
    box-shadow: 0 4px 16px var(--card-shadow);
  }

  .archive-card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    font-size: 0.875rem;
  }

  .archive-date {
    color: var(--text-muted);
    font-weight: 500;
    font-size: 0.75rem;
  }

  .archive-reading-time {
    color: var(--text-muted);
    font-style: italic;
  }

  .archive-title {
    margin: 0 0 1rem 0;
    font-size: 1.125rem;
    line-height: 1.4;
  }

  .archive-title a {
    color: var(--text-primary);
    text-decoration: none;
    font-weight: 600;
    transition: color 0.3s ease;
  }

  .archive-title a:hover {
    color: var(--color-primary);
  }

  .archive-excerpt {
    color: var(--text-secondary);
    line-height: 1.5;
    margin-bottom: 1rem;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    font-size: 0.9rem;
  }

  .archive-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0;
    align-items: center;
  }

  .archive-tag {
    color: #FF8C00;
    font-size: 0.75rem;
    font-weight: 400;
    text-decoration: none;
    transition: color 0.2s ease;
  }

  .archive-tag:hover {
    color: #FF4500;
  }

  .archive-tag:not(:last-child)::after {
    content: ", ";
    color: var(--text-muted);
  }

  .more-tags {
    color: var(--text-muted);
    font-size: 0.75rem;
    font-style: italic;
  }

  .archive-footer {
    text-align: center;
    padding-top: 2rem;
    border-top: 1px solid var(--border-light);
  }

  .back-to-journal {
    color: var(--color-primary);
    font-weight: 600;
    text-decoration: none;
    font-size: 1.125rem;
    transition: color 0.3s ease;
  }

  .back-to-journal:hover {
    color: var(--color-primary-hover);
  }

  @media (max-width: 768px) {
    .archive-header h1 {
      font-size: 2.5rem;
    }

    .archive-grid {
      grid-template-columns: 1fr;
    }

    .archive-card {
      padding: 1.25rem;
    }

    .archive-card-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }
  }

  @media (max-width: 480px) {
    .archive-header h1 {
      font-size: 2rem;
    }

    .archive-card {
      padding: 1rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Handle year toggles
    const yearToggleBtns = document.querySelectorAll('.year-toggle-btn');
    yearToggleBtns.forEach(btn => {
      btn.addEventListener('click', function() {
        const year = this.dataset.year;
        const content = document.querySelector(`[data-year-content="${year}"]`);
        const isExpanded = this.classList.contains('expanded');
        
        if (isExpanded) {
          this.classList.remove('expanded');
          content.classList.add('collapsed');
        } else {
          this.classList.add('expanded');
          content.classList.remove('collapsed');
        }
      });
    });
    
    // Handle month toggles
    const monthToggleBtns = document.querySelectorAll('.month-toggle-btn');
    monthToggleBtns.forEach(btn => {
      btn.addEventListener('click', function() {
        const month = this.dataset.month;
        const content = document.querySelector(`[data-month-content="${month}"]`);
        const isExpanded = this.classList.contains('expanded');
        
        if (isExpanded) {
          this.classList.remove('expanded');
          content.classList.add('collapsed');
        } else {
          this.classList.add('expanded');
          content.classList.remove('collapsed');
        }
      });
    });
    
    // Initialize all as expanded by default
    yearToggleBtns.forEach(btn => btn.classList.add('expanded'));
    monthToggleBtns.forEach(btn => btn.classList.add('expanded'));
  });
</script>