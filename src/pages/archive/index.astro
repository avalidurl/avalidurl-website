---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';

// Helper function to parse dates consistently in Istanbul timezone
const parseIstanbulDate = (dateString) => {
  // Handle non-string values
  if (typeof dateString !== 'string') {
    return new Date(dateString);
  }
  // If it's just a date (YYYY-MM-DD), append Istanbul timezone
  if (dateString.match(/^\d{4}-\d{2}-\d{2}$/)) {
    return new Date(dateString + 'T00:00:00+03:00');
  }
  // For datetime strings, parse as-is but assume they're in Istanbul time
  return new Date(dateString);
};

const allBlogPosts = await getCollection('blog', ({ data }) => {
  // Don't show draft posts
  if (data.draft) return false;
  
  // Allow posts with dates up to 1 day in the future (for timezone issues)
  const publishDate = parseIstanbulDate(data.publishDate);
  const now = new Date();
  const oneDayFromNow = new Date(now.getTime() + 24 * 60 * 60 * 1000);
  
  // Only filter out posts that are more than 1 day in the future
  return publishDate <= oneDayFromNow;
});

// Sort by publish date (newest first) using Istanbul timezone parsing
const sortedPosts = allBlogPosts.sort((a, b) => 
  parseIstanbulDate(b.data.publishDate).getTime() - parseIstanbulDate(a.data.publishDate).getTime()
);

// Group posts by year first, then by month
const postsByYear = {};
sortedPosts.forEach(post => {
  const date = parseIstanbulDate(post.data.publishDate);
  const year = date.getFullYear();
  const month = date.getMonth(); // 0-indexed
  
  if (!postsByYear[year]) {
    postsByYear[year] = {};
  }
  
  if (!postsByYear[year][month]) {
    postsByYear[year][month] = {
      monthName: date.toLocaleDateString('en-US', { month: 'long', timeZone: 'Europe/Istanbul' }),
      posts: []
    };
  }
  
  postsByYear[year][month].posts.push(post);
});

// Convert to sorted structure (newest year first, newest month first within each year)
const groupedPosts = Object.keys(postsByYear)
  .map(year => parseInt(year))
  .sort((a, b) => b - a)
  .map(year => ({
    year,
    totalPosts: Object.keys(postsByYear[year]).reduce((total, month) => total + postsByYear[year][month].posts.length, 0),
    months: Object.keys(postsByYear[year])
      .map(month => parseInt(month))
      .sort((a, b) => b - a)
      .map(month => ({
        month,
        monthName: postsByYear[year][month].monthName,
        posts: postsByYear[year][month].posts
      }))
  }));
---

<Layout title="Archive - Journal" description="Complete archive of all journal posts organized by year and month.">
  <main class="archive-container">
    <header class="archive-header">
      <h1>Journal Archive</h1>
      <div class="browse-nav">
        <a href="/categories" class="nav-button">Browse by Category →</a>
        <a href="/topics" class="nav-button">Browse Topics →</a>
        <a href="/blog" class="nav-button">← All Posts</a>
      </div>
      <p class="archive-subtitle">
        Complete collection of {allBlogPosts.length} posts exploring finance, art, technology, and culture.
      </p>
    </header>

    <div class="archive-content">
      {groupedPosts.map(({ year, totalPosts, months }) => (
        <section class="archive-year-section">
          <div class="year-header-collapsible" data-year-toggle={year}>
            <h2 class="archive-year">
              <a href={`/archive/${year}`} class="year-link">{year}</a> <span class="post-count">({totalPosts} posts)</span>
            </h2>
            <button class="year-toggle-btn" data-year={year}>
              <span class="toggle-icon">▼</span>
            </button>
          </div>
          <div class="year-content collapsed" data-year-content={year}>
            <div class="year-content-inner">
              {months.map(({ monthName, posts }) => (
              <section class="archive-month-section">
                <div class="month-header-collapsible" data-month-toggle={`${year}-${monthName.toLowerCase()}`}>
                  <h3 class="archive-month">
                    <a href={`/archive/${year}/${monthName.toLowerCase()}`} class="month-link">
                      {monthName} <span class="post-count">({posts.length})</span>
                    </a>
                  </h3>
                  <button class="month-toggle-btn" data-month={`${year}-${monthName.toLowerCase()}`}>
                    <span class="toggle-icon">▼</span>
                  </button>
                </div>
                <div class="month-content collapsed" data-month-content={`${year}-${monthName.toLowerCase()}`}>
                  <div class="month-content-inner">
                    <div class="archive-list">
                      {posts.map(post => (
                        <article class="archive-item">
                          <div class="archive-line">
                            <time class="archive-date">
                              {parseIstanbulDate(post.data.publishDate).toLocaleDateString('en-CA', {
                                timeZone: 'Europe/Istanbul'
                              }).split('-')[2]}
                            </time>
                            <a href={`/blog/${post.slug}`} class="archive-title">
                              {post.data.title}
                            </a>
                            {post.data.category && (
                              <div class="archive-category">
                                <a href={`/categories/${post.data.category.toLowerCase().replace(/\s+/g, '-').replace('&', 'and')}`} class="archive-category-link">
                                  {post.data.category}
                                </a>
                              </div>
                            )}
                          </div>
                        </article>
                      ))}
                    </div>
                  </div>
                </div>
              </section>
            ))}
            </div>
          </div>
        </section>
      ))}
    </div>
    
    <footer class="archive-footer">
      <a href="/blog" class="back-to-journal">← Back to Journal</a>
    </footer>
  </main>
</Layout>

<style>
  .archive-container {
    max-width: 900px;
    margin: 0 auto;
    padding: 2rem 1rem;
    min-height: calc(100vh - 70px);
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
  }

  .archive-header {
    text-align: left;
    margin-bottom: 3rem;
    border-bottom: 1px solid var(--border-light);
    padding-bottom: 2rem;
  }
  
  .browse-nav {
    display: flex;
    gap: 1rem;
    justify-content: center;
    margin: 1.5rem 0;
    flex-wrap: wrap;
  }
  
  .nav-button {
    background: none;
    border: 1px solid var(--border-medium);
    color: var(--text-secondary);
    padding: 0.5rem 1rem;
    border-radius: 6px;
    text-decoration: none;
    font-weight: 500;
    font-size: 0.9rem;
    transition: all 0.2s ease;
    white-space: nowrap;
  }
  
  .nav-button:hover {
    background: var(--color-primary);
    color: var(--text-inverse);
    border-color: var(--color-primary);
    transform: translateY(-1px);
  }

  .archive-header h1 {
    font-size: 2rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 0.5rem;
  }

  .archive-subtitle {
    font-size: 0.95rem;
    color: var(--text-secondary);
    line-height: 1.5;
  }

  .archive-content {
    margin-bottom: 3rem;
  }

  .archive-year-section {
    margin-bottom: 2rem;
  }

  .year-header-collapsible {
    display: flex;
    justify-content: space-between;
    align-items: center;
    cursor: pointer;
    padding: 0.75rem 0;
    border-bottom: 1px dotted var(--border-light);
    transition: background-color 0.2s ease;
  }

  .year-header-collapsible:hover {
    background: rgba(0, 0, 0, 0.02);
  }

  .year-link {
    color: var(--text-primary);
    text-decoration: none;
    transition: color 0.2s ease;
  }

  .year-link:hover {
    color: var(--color-primary);
  }

  .archive-year {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-primary);
    margin: 0;
    flex: 1;
  }

  .month-header-collapsible {
    display: flex;
    justify-content: space-between;
    align-items: center;
    cursor: pointer;
    padding: 0.5rem 1rem;
    border-bottom: 1px dotted var(--border-light);
    transition: background-color 0.2s ease;
    margin: 0.5rem 0;
  }

  .month-header-collapsible:hover {
    background: rgba(0, 0, 0, 0.02);
  }

  .archive-month {
    font-size: 1rem;
    font-weight: 500;
    color: var(--text-secondary);
    margin: 0;
    flex: 1;
  }

  .month-link {
    color: var(--text-secondary);
    text-decoration: none;
    transition: color 0.2s ease;
  }

  .month-link:hover {
    color: var(--color-primary);
  }

  .post-count {
    font-weight: 400;
    color: var(--text-muted);
    font-size: 0.9em;
  }

  .year-toggle-btn,
  .month-toggle-btn {
    background: none;
    border: none;
    cursor: pointer;
    color: var(--text-muted);
    font-size: 0.875rem;
    padding: 0.25rem;
    transition: all 0.2s ease;
  }

  .year-toggle-btn:hover,
  .month-toggle-btn:hover {
    color: var(--text-primary);
  }

  .toggle-icon {
    transition: transform 0.3s ease;
  }

  .year-toggle-btn.expanded .toggle-icon,
  .month-toggle-btn.expanded .toggle-icon {
    transform: rotate(180deg);
  }

  .year-content,
  .month-content {
    display: grid;
    grid-template-rows: 1fr;
    overflow: hidden;
    transition: grid-template-rows 0.3s ease;
  }

  .year-content.collapsed,
  .month-content.collapsed {
    grid-template-rows: 0fr;
  }

  .year-content-inner,
  .month-content-inner {
    overflow: hidden;
  }

  .archive-month-section {
    margin-bottom: 0;
  }

  .archive-list {
    padding: 0.5rem 0;
  }

  .archive-item {
    margin: 0;
    padding: 0;
  }

  .archive-line {
    display: flex;
    align-items: baseline;
    gap: 1rem;
    padding: 0.4rem 1rem;
    margin: 0.25rem 0;
    border-radius: 4px;
    transition: background-color 0.2s ease;
  }

  .archive-line:hover {
    background: rgba(0, 0, 0, 0.02);
  }

  .archive-date {
    color: var(--text-muted);
    font-size: 0.7rem;
    font-weight: 400;
    white-space: nowrap;
    flex-shrink: 0;
    min-width: 50px;
  }

  .archive-title {
    color: var(--text-primary);
    text-decoration: none;
    font-size: 0.85rem;
    font-weight: 400;
    line-height: 1.4;
    transition: color 0.2s ease;
    border-bottom: 1px dotted var(--text-muted);
    flex: 1;
    min-width: 0;
  }

  .archive-title:hover {
    color: var(--color-primary);
    border-bottom-color: var(--color-primary);
  }

  .archive-category {
    display: flex;
    align-items: baseline;
    flex-shrink: 0;
  }

  .archive-category-link {
    color: var(--blog-warm-white);
    background: var(--blog-sepia);
    font-size: 0.7rem;
    font-weight: 500;
    text-decoration: none;
    transition: all 0.2s ease;
    line-height: 1.2;
    display: inline-flex;
    align-items: center;
    padding: 0.2rem 0.5rem;
    border-radius: 12px;
    border: 1px solid var(--blog-sepia);
  }

  .archive-category-link:hover {
    background: var(--blog-bronze);
    border-color: var(--blog-bronze);
    transform: translateY(-1px);
  }

  .archive-category-link:visited {
    color: var(--blog-warm-white);
    background: var(--blog-sepia);
  }

  .archive-category-link:visited:hover {
    color: var(--blog-warm-white);
    background: var(--blog-bronze);
  }

  .archive-footer {
    text-align: center;
    padding-top: 2rem;
    border-top: 1px solid var(--border-light);
  }

  .back-to-journal {
    color: var(--color-primary);
    font-weight: 500;
    text-decoration: none;
    font-size: 0.95rem;
    transition: color 0.3s ease;
  }

  .back-to-journal:hover {
    color: var(--color-primary-hover);
  }

  @media (max-width: 768px) {
    .archive-container {
      padding: 1.5rem 1rem;
    }
    
    .archive-header h1 {
      font-size: 1.75rem;
    }

    .archive-line {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
      padding: 0.75rem 1rem;
    }

    .archive-title {
      border-bottom: none;
      margin-bottom: 0.25rem;
    }

    .archive-category {
      align-self: stretch;
    }

    .archive-month {
      margin-left: 0.5rem;
    }
  }

  @media (max-width: 480px) {
    .archive-container {
      padding: 1rem 0.75rem;
    }
    
    .archive-header h1 {
      font-size: 1.5rem;
    }

    .archive-line {
      padding: 0.5rem 0.75rem;
    }

    .archive-year {
      font-size: 1.125rem;
    }

    .archive-month {
      font-size: 0.95rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Helper function to toggle content
    function toggleContent(btn, content) {
      const isCollapsed = content.classList.contains('collapsed');
      
      if (isCollapsed) {
        btn.classList.add('expanded');
        content.classList.remove('collapsed');
      } else {
        btn.classList.remove('expanded');
        content.classList.add('collapsed');
      }
    }

    // Handle year toggles - entire dotted area clickable
    const yearHeaders = document.querySelectorAll('[data-year-toggle]');
    yearHeaders.forEach(header => {
      header.addEventListener('click', function(e) {
        // Don't toggle if clicking on the year link
        if (e.target.closest('.year-link')) {
          return;
        }
        
        const year = this.dataset.yearToggle;
        const btn = this.querySelector('.year-toggle-btn');
        const content = document.querySelector(`[data-year-content="${year}"]`);
        
        toggleContent(btn, content);
      });
    });

    // Handle month toggles - entire dotted area clickable  
    const monthHeaders = document.querySelectorAll('[data-month-toggle]');
    monthHeaders.forEach(header => {
      header.addEventListener('click', function(e) {
        // Don't toggle if clicking on the month link
        if (e.target.closest('.month-link')) {
          return;
        }
        
        const monthId = this.dataset.monthToggle;
        const btn = this.querySelector('.month-toggle-btn');
        const content = document.querySelector(`[data-month-content="${monthId}"]`);
        
        toggleContent(btn, content);
      });
    });
  });
</script>