---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import Breadcrumb from '../../components/Breadcrumb.astro';

export const prerender = true;

export async function getStaticPaths() {
  const categories = [
    'Finance & Markets',
    'Crypto & Web3', 
    'Art & Culture',
    'Technology & Data',
    'General'
  ];

  const paths = categories.map(category => ({
    params: { 
      category: category.toLowerCase().replace(/\s+/g, '-').replace('&', 'and')
    },
    props: { 
      categoryName: category,
      categorySlug: category.toLowerCase().replace(/\s+/g, '-').replace('&', 'and')
    }
  }));
  
  return paths;
}

const { categoryName, categorySlug } = Astro.props;

// Helper function to parse dates consistently in Istanbul timezone
const parseIstanbulDate = (dateString) => {
  if (typeof dateString !== 'string') {
    return new Date(dateString);
  }
  if (dateString.match(/^\d{4}-\d{2}-\d{2}$/)) {
    return new Date(dateString + 'T00:00:00+03:00');
  }
  return new Date(dateString);
};

// Get all blog posts for this category
const allPosts = await getCollection('blog', ({ data }) => {
  if (data.draft) return false;
  
  const publishDate = parseIstanbulDate(data.publishDate);
  const now = new Date();
  const oneDayFromNow = new Date(now.getTime() + 24 * 60 * 60 * 1000);
  
  return publishDate <= oneDayFromNow && data.category === categoryName;
});

// Sort by publish date (newest first)
const sortedPosts = allPosts.sort((a, b) => 
  parseIstanbulDate(b.data.publishDate).getTime() - parseIstanbulDate(a.data.publishDate).getTime()
);

// Category descriptions
const categoryDescriptions = {
  'Finance & Markets': 'Financial analysis, market insights, DeFi protocols, and economic commentary.',
  'Crypto & Web3': 'Blockchain technology, cryptocurrency analysis, and decentralized web developments.',
  'Art & Culture': 'Conceptual art, cultural criticism, creative writing, and artistic expression.',
  'Technology & Data': 'Technical analysis, data visualization, and emerging technologies.',
  'General': 'Daily thoughts, personal reflections, and miscellaneous topics.'
};

// Breadcrumb items
const breadcrumbItems = [
  { name: 'Home', url: '/' },
  { name: 'Categories', url: '/categories' },
  { name: categoryName, url: `/categories/${categorySlug}` }
];
---

<Layout 
  title={`${categoryName} - Gökhan Turhan`} 
  description={`${categoryDescriptions[categoryName]} Browse all posts in the ${categoryName} category.`}
>
  <main class="blog-container">
    <!-- Breadcrumb Navigation -->
    <Breadcrumb items={breadcrumbItems} />

    <header class="blog-header">
      <h1>{categoryName}</h1>
      <div class="blog-nav">
        <a href="/blog" class="nav-button">← All Posts</a>
        <a href="/topics" class="nav-button">Browse Topics →</a>
        <a href="/archive" class="nav-button">Browse Archive →</a>
      </div>
      <p class="blog-subtitle">
        {categoryDescriptions[categoryName]}
      </p>
      <div class="category-stats">
        <span class="post-count">{sortedPosts.length} post{sortedPosts.length !== 1 ? 's' : ''}</span>
      </div>
    </header>

    <div class="blog-layout">
      <section class="blog-main">
        {sortedPosts.length > 0 ? (
          <div class="articles-list">
            {sortedPosts.map(post => (
              <article class="article-item">
                <div class="article-line">
                  <time class="article-date">
                    {(() => {
                      const date = parseIstanbulDate(post.data.publishDate);
                      const formattedDate = date.toLocaleDateString('en-CA', { timeZone: 'Europe/Istanbul' });
                      return formattedDate;
                    })()}
                  </time>
                  <a href={`/blog/${post.slug}`} class="article-title">
                    {post.data.title}
                  </a>
                  {post.data.tags && post.data.tags.length > 0 && (
                    <div class="article-tags">
                      {post.data.tags.sort((a, b) => a.localeCompare(b)).slice(0, 3).map((tag, index, array) => (
                        <>
                          <a href={`/topics/${tag.toLowerCase().replace(/\s+/g, '-')}`} class="article-tag">{tag}</a>
                        </>
                      ))}
                    </div>
                  )}
                </div>
              </article>
            ))}
          </div>
        ) : (
          <div class="no-posts">
            <p>No posts found in this category yet.</p>
            <a href="/blog" class="nav-button">Browse All Posts →</a>
          </div>
        )}
      </section>
    </div>
  </main>
</Layout>

<style>
  .category-stats {
    margin-top: 1rem;
    text-align: center;
  }
  
  .post-count {
    background: var(--blog-sepia);
    color: var(--blog-warm-white);
    padding: 0.4rem 0.8rem;
    border-radius: 4px;
    font-size: 0.875rem;
    font-weight: 600;
    letter-spacing: 0.3px;
  }
  
  .no-posts {
    text-align: center;
    padding: 4rem 2rem;
    color: var(--text-muted);
  }
  
  .no-posts p {
    margin-bottom: 2rem;
    font-size: 1.1rem;
  }
  
  /* Match blog listing styles */
  .articles-list {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }
  
  .article-item {
    border-bottom: 1px solid var(--border-light);
    padding-bottom: 0.75rem;
  }
  
  .article-item:last-child {
    border-bottom: none;
  }
  
  .article-line {
    display: flex;
    align-items: baseline;
    gap: 1rem;
    flex-wrap: wrap;
  }
  
  .article-date {
    color: var(--text-muted);
    font-size: 0.875rem;
    font-weight: 500;
    min-width: 6rem;
  }
  
  .article-title {
    flex: 1;
    color: var(--text-primary);
    text-decoration: none;
    font-weight: 400;
    font-size: 0.95rem;
    transition: color 0.2s ease;
    border-bottom: 1px dotted var(--text-muted);
  }
  
  .article-title:hover {
    color: var(--color-primary);
    border-bottom-color: var(--color-primary);
  }
  
  .article-tags {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }
  
  .article-tag {
    color: white;
    background: #FF8C00;
    font-size: 0.7rem;
    font-weight: 500;
    text-decoration: none;
    transition: all 0.2s ease;
    line-height: 1.2;
    display: inline-flex;
    align-items: center;
    padding: 0.2rem 0.5rem;
    border-radius: 12px;
    border: 1px solid #FF8C00;
  }
  
  .article-tag:hover {
    background: #FF4500;
    border-color: #FF4500;
    transform: translateY(-1px);
  }
  
  @media (max-width: 768px) {
    .article-line {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }
    
    .article-date {
      min-width: auto;
    }
  }
</style>