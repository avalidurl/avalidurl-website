---
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';

// Helper function to parse dates consistently in Istanbul timezone
const parseIstanbulDate = (dateString) => {
  // Handle non-string values
  if (typeof dateString !== 'string') {
    return new Date(dateString);
  }
  // If it's just a date (YYYY-MM-DD), append Istanbul timezone
  if (dateString.match(/^\d{4}-\d{2}-\d{2}$/)) {
    return new Date(dateString + 'T00:00:00+03:00');
  }
  // For datetime strings, parse as-is but assume they're in Istanbul time
  return new Date(dateString);
};

const allProducts = await getCollection('products', ({ data }) => {
  // Don't show draft products
  if (data.draft) return false;
  
  // Allow products with dates up to 1 day in the future (for timezone issues)
  const publishDate = parseIstanbulDate(data.publishDate);
  const now = new Date();
  const oneDayFromNow = new Date(now.getTime() + 24 * 60 * 60 * 1000);
  
  // Only filter out products that are more than 1 day in the future
  return publishDate <= oneDayFromNow;
});

// Sort by publish date (newest first) using Istanbul timezone parsing
const sortedProducts = allProducts.sort((a, b) => 
  parseIstanbulDate(b.data.publishDate).getTime() - parseIstanbulDate(a.data.publishDate).getTime()
);

// Group products by year first, then by month for archive
const productsByYear = {};
sortedProducts.forEach(product => {
  const date = parseIstanbulDate(product.data.publishDate);
  const year = date.getFullYear();
  const month = date.getMonth(); // 0-indexed
  
  if (!productsByYear[year]) {
    productsByYear[year] = {};
  }
  
  if (!productsByYear[year][month]) {
    productsByYear[year][month] = {
      monthName: date.toLocaleDateString('en-US', { month: 'long', timeZone: 'Europe/Istanbul' }),
      products: []
    };
  }
  
  productsByYear[year][month].products.push(product);
});

// Convert to sorted structure (newest year first, newest month first within each year)
const groupedProducts = Object.keys(productsByYear)
  .map(year => parseInt(year))
  .sort((a, b) => b - a)
  .map(year => ({
    year,
    totalProducts: Object.keys(productsByYear[year]).reduce((total, month) => total + productsByYear[year][month].products.length, 0),
    months: Object.keys(productsByYear[year])
      .map(month => parseInt(month))
      .sort((a, b) => b - a)
      .map(month => ({
        month,
        monthName: productsByYear[year][month].monthName,
        products: productsByYear[year][month].products
      }))
  }));

// Show all products in chronological order (newest first)
const allProductsList = sortedProducts;

// Show first 10 products initially, keep remaining for load more
const initialProducts = allProductsList.slice(0, 10);
const remainingProducts = allProductsList.slice(10);
---

<Layout title="Products - Finance & Tech Tools" description="Explore a collection of financial technology tools, data visualization platforms, and blockchain applications designed to bridge finance, art, and technology.">
  <main class="products-container">
    <header class="products-header">
      <h1>Products</h1>
      <div class="products-nav">
        <button id="archive-toggle" class="nav-button archive-toggle">
          <span class="toggle-text">Show Archive</span>
          <span class="toggle-icon">▼</span>
        </button>
        <a href="/products/archive" class="nav-button">Browse Archive →</a>
        <a href="/topics" class="nav-button">Browse by Topics →</a>
      </div>
      <p class="products-subtitle">
        A collection of financial technology tools, data visualization platforms, and experimental applications exploring the intersection of finance, art, and technology.
      </p>
    </header>

    <!-- Collapsible Archive Section -->
    <div id="archive-section" class="archive-section collapsed">
      <div class="archive-content">
        <div class="archive-inner">
          {groupedProducts.map(({ year, totalProducts, months }) => (
            <section class="archive-year-section">
              <div class="year-header-collapsible" data-year-toggle={year}>
                <h3 class="archive-year">
                  <a href={`/products/archive/${year}`} class="year-link">{year}</a> 
                  <span class="product-count">({totalProducts} products)</span>
                </h3>
                <button class="year-toggle-btn" data-year={year}>
                  <span class="toggle-icon">▼</span>
                </button>
              </div>
              <div class="year-content collapsed" data-year-content={year}>
                <div class="year-content-inner">
                  {months.map(({ monthName, products }) => (
                  <section class="archive-month-section">
                    <div class="month-header-collapsible" data-month-toggle={`${year}-${monthName.toLowerCase()}`}>
                      <h4 class="archive-month">
                        <a href={`/products/archive/${year}/${monthName.toLowerCase()}`} class="month-link">
                          {monthName} <span class="product-count">({products.length})</span>
                        </a>
                      </h4>
                      <button class="month-toggle-btn" data-month={`${year}-${monthName.toLowerCase()}`}>
                        <span class="toggle-icon">▼</span>
                      </button>
                    </div>
                    <div class="month-content collapsed" data-month-content={`${year}-${monthName.toLowerCase()}`}>
                      <div class="month-content-inner">
                        <div class="archive-list">
                          {products.map(product => (
                            <article class="archive-item">
                              <div class="archive-line">
                                <time class="archive-date">
                                  {parseIstanbulDate(product.data.publishDate).toLocaleDateString('en-CA', {
                                    timeZone: 'Europe/Istanbul'
                                  }).split('-')[2]}
                                </time>
                                <a href={product.data.url} target="_blank" rel="noopener noreferrer" class="archive-title">
                                  {product.data.title}
                                </a>
                                <span class="archive-status" data-status={product.data.status.toLowerCase()}>
                                  {product.data.status}
                                </span>
                                {product.data.tags.length > 0 && (
                                  <div class="archive-tags">
                                    {product.data.tags.sort((a, b) => a.localeCompare(b)).slice(0, 3).map(tag => (
                                      <a href={`/topics/${tag.toLowerCase().replace(/\s+/g, '-')}`} class="archive-tag">{tag}</a>
                                    ))}
                                  </div>
                                )}
                              </div>
                            </article>
                          ))}
                        </div>
                      </div>
                    </div>
                  </section>
                ))}
                </div>
              </div>
            </section>
          ))}
        </div>
      </div>
    </div>

    <div class="products-layout">
      <section class="products-main">
        <h2>All Products</h2>
        <div class="products-list" id="products-list">
          {initialProducts.map(product => (
            <article class="product-item">
              <div class="product-line">
                <time class="product-date">
                  {(() => {
                    const date = parseIstanbulDate(product.data.publishDate);
                    const year = date.getFullYear();
                    const month = date.toLocaleDateString('en-US', { month: 'long', timeZone: 'Europe/Istanbul' });
                    const monthLower = month.toLowerCase();
                    const formattedDate = date.toLocaleDateString('en-CA', { timeZone: 'Europe/Istanbul' });
                    return (
                      <a href={`/products/archive/${year}/${monthLower}`} class="date-link" title={`See ${month} ${year}'s archive`}>
                        {formattedDate}
                      </a>
                    );
                  })()}
                </time>
                <div class="product-content">
                  <div class="product-header">
                    <a href={product.data.url} target="_blank" rel="noopener noreferrer" class="product-title">
                      {product.data.title}
                    </a>
                    <span class="product-status" data-status={product.data.status.toLowerCase()}>
                      {product.data.status}
                    </span>
                  </div>
                  <p class="product-description">
                    {product.data.description}
                  </p>
                  <div class="product-meta">
                    {product.data.tech && product.data.tech.length > 0 && (
                      <div class="product-tech">
                        {product.data.tech.slice(0, 4).map(tech => (
                          <span class="tech-tag">{tech}</span>
                        ))}
                      </div>
                    )}
                    {product.data.tags && product.data.tags.length > 0 && (
                      <div class="product-tags">
                        {product.data.tags.sort((a, b) => a.localeCompare(b)).slice(0, 3).map(tag => (
                          <a href={`/topics/${tag.toLowerCase().replace(/\s+/g, '-')}`} class="product-tag">{tag}</a>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </article>
          ))}
        </div>
        
        {remainingProducts.length > 0 && (
          <div class="load-more-container">
            <button id="load-more-btn" class="load-more-btn">
              Load More Products ({remainingProducts.length} remaining)
            </button>
          </div>
        )}
        
        {/* Hidden data for JavaScript */}
        <script id="remaining-products-data" type="application/json" set:html={JSON.stringify(remainingProducts.map(product => ({
          slug: product.slug,
          title: product.data.title,
          description: product.data.description,
          publishDate: product.data.publishDate,
          url: product.data.url,
          status: product.data.status,
          tech: product.data.tech || [],
          tags: product.data.tags || []
        })))} />
      </section>
    </div>
  </main>
</Layout>

<style is:global>
  .products-container {
    max-width: 900px;
    margin: 0 auto;
    padding: 2rem 1rem;
    min-height: calc(100vh - 70px);
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
  }

  .products-header {
    text-align: center;
    margin-bottom: 3rem;
    border-bottom: 1px solid var(--border-light);
    padding-bottom: 2rem;
  }

  .products-header h1 {
    font-size: 2rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 1rem;
  }

  .products-nav {
    margin: 1rem 0;
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
    justify-content: center;
    align-items: stretch;
  }

  .nav-button {
    color: var(--color-primary);
    text-decoration: none;
    font-weight: 500;
    font-size: 0.95rem;
    transition: all 0.2s ease;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    border: 1px solid var(--color-primary);
    border-radius: 6px;
    width: 180px;
  }

  .nav-button:hover {
    background: var(--color-primary);
    color: white;
    transform: translateY(-1px);
  }

  .archive-toggle {
    background: none !important;
    border: 1px solid var(--color-primary) !important;
    cursor: pointer;
    position: relative;
  }

  .archive-toggle:hover {
    background: var(--color-primary) !important;
    color: white !important;
  }

  .archive-toggle .toggle-icon {
    margin-left: 0.5rem;
    transition: transform 0.3s ease;
    font-size: 0.8rem;
  }

  .archive-toggle.expanded .toggle-icon {
    transform: rotate(180deg);
  }

  .products-subtitle {
    font-size: 0.95rem;
    color: var(--text-secondary);
    line-height: 1.5;
    margin-top: 0.5rem;
  }
  
  .products-layout {
    margin-top: 2rem;
  }
  
  .products-main h2 {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 1.5rem;
    border-bottom: 1px solid var(--border-light);
    padding-bottom: 0.75rem;
  }
  
  .products-list {
    padding: 0;
    margin-bottom: 0;
  }

  .product-item {
    margin: 0 0 2rem 0;
    padding: 1.5rem;
    border: 1px solid var(--border-light);
    border-radius: 8px;
    transition: all 0.2s ease;
  }

  .product-item:hover {
    border-color: var(--color-primary);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .product-line {
    display: flex;
    gap: 1.5rem;
    align-items: flex-start;
  }

  .product-date {
    color: var(--text-muted);
    font-size: 0.8rem;
    font-weight: 400;
    line-height: 1.4;
    white-space: nowrap;
    flex-shrink: 0;
    min-width: 80px;
    display: flex;
    align-items: center;
  }

  .date-link {
    color: var(--text-muted);
    text-decoration: none;
    transition: color 0.2s ease;
    border-bottom: 1px solid transparent;
  }

  .date-link:hover {
    color: var(--color-primary);
    border-bottom-color: var(--color-primary);
  }

  .product-content {
    flex: 1;
    min-width: 0;
  }

  .product-header {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 0.75rem;
    flex-wrap: wrap;
  }

  .product-title {
    color: var(--text-primary);
    text-decoration: none;
    font-size: 1.125rem;
    font-weight: 600;
    line-height: 1.3;
    transition: color 0.2s ease;
    flex: 1;
    min-width: 0;
  }

  .product-title:hover {
    color: var(--color-primary);
  }

  .product-status {
    background: #22c55e;
    color: white;
    font-size: 0.75rem;
    font-weight: 500;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    flex-shrink: 0;
  }

  .product-status[data-status="beta"] {
    background: #f59e0b;
  }

  .product-status[data-status="development"] {
    background: #6366f1;
  }

  .product-status[data-status="archived"] {
    background: #6b7280;
  }

  .product-description {
    color: var(--text-secondary);
    font-size: 0.95rem;
    line-height: 1.5;
    margin-bottom: 1rem;
  }

  .product-meta {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .product-tech {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .tech-tag {
    background: var(--color-primary);
    color: white;
    font-size: 0.75rem;
    font-weight: 500;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
  }

  .product-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0;
    align-items: center;
  }

  .product-tag {
    color: #FF8C00;
    font-size: 0.75rem;
    font-weight: 400;
    text-decoration: none;
    transition: color 0.2s ease;
    line-height: 1.4;
    display: inline-flex;
    align-items: center;
  }

  .product-tag:hover {
    color: #FF4500;
  }

  .product-tag:not(:last-child)::after {
    content: ", ";
    color: var(--text-muted);
  }

  .load-more-container {
    text-align: center;
    margin-top: 2rem;
    padding-top: 2rem;
    border-top: 1px solid var(--border-light);
  }

  .load-more-btn {
    background: var(--color-primary);
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    font-size: 0.95rem;
    font-weight: 500;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .load-more-btn:hover {
    background: var(--color-primary-hover);
    transform: translateY(-1px);
  }

  .load-more-btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none;
  }

  /* Archive Section Styles */
  .archive-section {
    display: grid;
    grid-template-rows: 0fr;
    overflow: hidden;
    transition: grid-template-rows 0.3s ease;
    margin-bottom: 2rem;
    border-bottom: 1px solid var(--border-light);
  }

  .archive-section.expanded {
    grid-template-rows: 1fr;
  }

  .archive-content {
    overflow: hidden;
  }

  .archive-inner {
    padding: 2rem 0;
    max-width: 100%;
  }

  .archive-year-section {
    margin-bottom: 1.5rem;
  }

  .year-header-collapsible {
    display: flex;
    justify-content: space-between;
    align-items: center;
    cursor: pointer;
    padding: 0.5rem 0;
    border-bottom: 1px dotted var(--border-light);
    transition: background-color 0.2s ease;
  }

  .year-header-collapsible:hover {
    background: rgba(0, 0, 0, 0.02);
  }

  .archive-year {
    font-size: 1rem;
    font-weight: 600;
    color: var(--text-primary);
    margin: 0;
    flex: 1;
  }

  .year-link {
    color: var(--text-primary);
    text-decoration: none;
    transition: color 0.2s ease;
  }

  .year-link:hover {
    color: var(--color-primary);
  }

  .month-header-collapsible {
    display: flex;
    justify-content: space-between;
    align-items: center;
    cursor: pointer;
    padding: 0.4rem 0.8rem;
    border-bottom: 1px dotted var(--border-light);
    transition: background-color 0.2s ease;
    margin: 0.4rem 0;
  }

  .month-header-collapsible:hover {
    background: rgba(0, 0, 0, 0.02);
  }

  .archive-month {
    font-size: 0.9rem;
    font-weight: 500;
    color: var(--text-secondary);
    margin: 0;
    flex: 1;
  }

  .month-link {
    color: var(--text-secondary);
    text-decoration: none;
    transition: color 0.2s ease;
  }

  .month-link:hover {
    color: var(--color-primary);
  }

  .product-count {
    font-weight: 400;
    color: var(--text-muted);
    font-size: 0.85em;
  }

  .year-toggle-btn,
  .month-toggle-btn {
    background: none;
    border: none;
    cursor: pointer;
    color: var(--text-muted);
    font-size: 0.8rem;
    padding: 0.2rem;
    transition: all 0.2s ease;
  }

  .year-toggle-btn:hover,
  .month-toggle-btn:hover {
    color: var(--text-primary);
  }

  .year-toggle-btn .toggle-icon,
  .month-toggle-btn .toggle-icon {
    transition: transform 0.3s ease;
  }

  .year-toggle-btn.expanded .toggle-icon,
  .month-toggle-btn.expanded .toggle-icon {
    transform: rotate(180deg);
  }

  .year-content,
  .month-content {
    display: grid;
    grid-template-rows: 1fr;
    overflow: hidden;
    transition: grid-template-rows 0.3s ease;
  }

  .year-content.collapsed,
  .month-content.collapsed {
    grid-template-rows: 0fr;
  }

  .year-content-inner,
  .month-content-inner {
    overflow: hidden;
  }

  .archive-month-section {
    margin-bottom: 0;
  }

  .archive-list {
    padding: 0.4rem 0;
  }

  .archive-item {
    margin: 0;
    padding: 0;
  }

  .archive-line {
    display: flex;
    align-items: center;
    gap: 0.8rem;
    padding: 0.3rem 0.8rem;
    margin: 0.2rem 0;
    border-radius: 3px;
    transition: background-color 0.2s ease;
  }

  .archive-line:hover {
    background: rgba(0, 0, 0, 0.02);
  }

  .archive-date {
    color: var(--text-muted);
    font-size: 0.7rem;
    font-weight: 400;
    white-space: nowrap;
    flex-shrink: 0;
    min-width: 30px;
  }

  .archive-title {
    color: var(--text-primary);
    text-decoration: none;
    font-size: 0.85rem;
    font-weight: 400;
    line-height: 1.3;
    transition: color 0.2s ease;
    border-bottom: 1px dotted var(--text-muted);
    flex: 1;
    min-width: 0;
  }

  .archive-title:hover {
    color: var(--color-primary);
    border-bottom-color: var(--color-primary);
  }

  .archive-status {
    background: #22c55e;
    color: white;
    font-size: 0.62rem;
    font-weight: 500;
    padding: 0.15rem 0.3rem;
    border-radius: 2px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    flex-shrink: 0;
  }

  .archive-status[data-status="beta"] {
    background: #f59e0b;
  }

  .archive-status[data-status="development"] {
    background: #6366f1;
  }

  .archive-status[data-status="archived"] {
    background: #6b7280;
  }

  .archive-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0;
    align-items: center;
    flex-shrink: 0;
  }

  .archive-tag {
    color: #FF8C00;
    font-size: 0.7rem;
    font-weight: 400;
    text-decoration: none;
    transition: color 0.2s ease;
  }

  .archive-tag:hover {
    color: #FF4500;
  }

  .archive-tag:not(:last-child)::after {
    content: ", ";
    color: var(--text-muted);
  }

  @media (max-width: 768px) {
    .products-container {
      padding: 1.5rem 1rem;
    }
    
    .products-header h1 {
      font-size: 1.75rem;
    }

    .product-item {
      padding: 1rem;
      margin-bottom: 1.5rem;
    }

    .product-line {
      flex-direction: column;
      gap: 1rem;
    }

    .product-date {
      font-size: 0.75rem;
      min-width: auto;
    }

    .product-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }

    .product-title {
      font-size: 1rem;
    }

    .product-meta {
      gap: 0.5rem;
    }
  }

  @media (max-width: 480px) {
    .products-container {
      padding: 1rem 0.75rem;
    }
    
    .products-header h1 {
      font-size: 1.5rem;
    }

    .products-nav {
      flex-direction: column;
      gap: 0.5rem;
    }

    .nav-button {
      width: 100%;
    }

    .product-item {
      padding: 0.75rem;
    }

    /* Archive mobile styles */
    .archive-inner {
      padding: 1rem 0;
    }

    .archive-line {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.4rem;
      padding: 0.5rem 0.6rem;
    }

    .archive-title {
      border-bottom: none;
      margin-bottom: 0.2rem;
    }

    .archive-tags {
      align-self: stretch;
    }

    .archive-month {
      margin-left: 0.3rem;
    }
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Archive toggle functionality
  const archiveToggle = document.getElementById('archive-toggle');
  const archiveSection = document.getElementById('archive-section');
  
  if (archiveToggle && archiveSection) {
    archiveToggle.addEventListener('click', function() {
      const isExpanded = archiveSection.classList.contains('expanded');
      const toggleText = this.querySelector('.toggle-text');
      
      if (isExpanded) {
        archiveSection.classList.remove('expanded');
        this.classList.remove('expanded');
        toggleText.textContent = 'Show Archive';
      } else {
        archiveSection.classList.add('expanded');
        this.classList.add('expanded');
        toggleText.textContent = 'Hide Archive';
      }
    });
  }

  // Helper function to toggle content
  function toggleContent(btn, content) {
    const isCollapsed = content.classList.contains('collapsed');
    
    if (isCollapsed) {
      btn.classList.add('expanded');
      content.classList.remove('collapsed');
    } else {
      btn.classList.remove('expanded');
      content.classList.add('collapsed');
    }
  }

  // Handle year toggles - entire dotted area clickable
  const yearHeaders = document.querySelectorAll('[data-year-toggle]');
  yearHeaders.forEach(header => {
    header.addEventListener('click', function(e) {
      // Don't toggle if clicking on the year link
      if (e.target.closest('.year-link')) {
        return;
      }
      
      const year = this.dataset.yearToggle;
      const btn = this.querySelector('.year-toggle-btn');
      const content = document.querySelector(`[data-year-content="${year}"]`);
      
      toggleContent(btn, content);
    });
  });

  // Handle month toggles - entire dotted area clickable  
  const monthHeaders = document.querySelectorAll('[data-month-toggle]');
  monthHeaders.forEach(header => {
    header.addEventListener('click', function(e) {
      // Don't toggle if clicking on the month link
      if (e.target.closest('.month-link')) {
        return;
      }
      
      const monthId = this.dataset.monthToggle;
      const btn = this.querySelector('.month-toggle-btn');
      const content = document.querySelector(`[data-month-content="${monthId}"]`);
      
      toggleContent(btn, content);
    });
  });

  // Load more functionality
  const loadMoreBtn = document.getElementById('load-more-btn');
  const productsList = document.getElementById('products-list');
  
  if (!loadMoreBtn || !productsList) return;
  
  // Parse remaining products data from server-side
  const remainingData = JSON.parse(document.getElementById('remaining-products-data')?.textContent || '[]');
  
  let currentIndex = 0;
  const productsPerLoad = 10;
  
  loadMoreBtn.addEventListener('click', function() {
    loadMoreBtn.disabled = true;
    
    // Get products to load
    const productsToLoad = remainingData.slice(currentIndex, currentIndex + productsPerLoad);
    
    // Create and append each product
    productsToLoad.forEach((product) => {
      const productHTML = createProductHTML(product);
      productsList.insertAdjacentHTML('beforeend', productHTML);
    });
    
    currentIndex += productsPerLoad;
    
    // Update button or hide if no more products
    if (currentIndex >= remainingData.length) {
      loadMoreBtn.style.display = 'none';
    } else {
      const remaining = remainingData.length - currentIndex;
      loadMoreBtn.textContent = `Load More Products (${remaining} remaining)`;
      loadMoreBtn.disabled = false;
    }
  });
  
  // Helper function to parse dates consistently in Istanbul timezone
  function parseIstanbulDate(dateString) {
    // Handle non-string values
    if (typeof dateString !== 'string') {
      return new Date(dateString);
    }
    // If it's just a date (YYYY-MM-DD), append Istanbul timezone
    if (dateString.match(/^\d{4}-\d{2}-\d{2}$/)) {
      return new Date(dateString + 'T00:00:00+03:00');
    }
    // For datetime strings, parse as-is but assume they're in Istanbul time
    return new Date(dateString);
  }

  function createProductHTML(product) {
    const publishDate = parseIstanbulDate(product.publishDate);
    const year = publishDate.getFullYear();
    const month = publishDate.toLocaleDateString('en-US', { month: 'long', timeZone: 'Europe/Istanbul' });
    const monthLower = month.toLowerCase();
    const formattedDate = publishDate.toLocaleDateString('en-CA', { timeZone: 'Europe/Istanbul' });
    
    let techHTML = '';
    if (product.tech && product.tech.length > 0) {
      const techTags = product.tech.slice(0, 4).map(tech => 
        `<span class="tech-tag">${tech}</span>`
      ).join('');
      techHTML = `<div class="product-tech">${techTags}</div>`;
    }

    let tagsHTML = '';
    if (product.tags && product.tags.length > 0) {
      const tagsToShow = product.tags.sort((a, b) => a.localeCompare(b)).slice(0, 3);
      const tagLinks = tagsToShow.map(tag => 
        `<a href="/topics/${tag.toLowerCase().replace(/\s+/g, '-')}" class="product-tag">${tag}</a>`
      ).join('');
      tagsHTML = `<div class="product-tags">${tagLinks}</div>`;
    }
    
    return `
      <article class="product-item">
        <div class="product-line">
          <time class="product-date">
            <a href="/products/archive/${year}/${monthLower}" class="date-link" title="See ${month} ${year}'s archive">
              ${formattedDate}
            </a>
          </time>
          <div class="product-content">
            <div class="product-header">
              <a href="${product.url}" target="_blank" rel="noopener noreferrer" class="product-title">
                ${product.title}
              </a>
              <span class="product-status" data-status="${product.status.toLowerCase()}">
                ${product.status}
              </span>
            </div>
            <p class="product-description">
              ${product.description}
            </p>
            <div class="product-meta">
              ${techHTML}
              ${tagsHTML}
            </div>
          </div>
        </div>
      </article>
    `;
  }
});
</script>