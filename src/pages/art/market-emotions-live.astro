---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Market Emotions - Live Visualization" description="Real-time algorithmic interpretation of market volatility patterns rendered through generative color fields.">
  <main class="container">
    <header class="visualization-header">
      <h1>Market Emotions</h1>
      <p class="viz-subtitle">
        Live algorithmic interpretation of S&P 500 volatility patterns
      </p>
      <div class="market-stats">
        <div class="stat-item">
          <span class="stat-label">VIX (Fear Index)</span>
          <span class="stat-value" id="vix-value">Loading...</span>
        </div>
        <div class="stat-item">
          <span class="stat-label">Market Sentiment</span>
          <span class="stat-value" id="sentiment-value">Calculating...</span>
        </div>
        <div class="stat-item">
          <span class="stat-label">Emotional State</span>
          <span class="stat-value" id="emotion-state">Analyzing...</span>
        </div>
      </div>
    </header>

    <div class="visualization-container">
      <canvas id="emotions-canvas"></canvas>
      <div class="controls">
        <button id="play-pause" class="control-btn">‚è∏Ô∏è Pause</button>
        <button id="reset" class="control-btn">üîÑ Reset</button>
        <div class="intensity-control">
          <label for="intensity">Emotional Intensity</label>
          <input type="range" id="intensity" min="0.1" max="2.0" step="0.1" value="1.0">
          <span id="intensity-value">1.0x</span>
        </div>
      </div>
    </div>

    <div class="artwork-info">
      <div class="description">
        <h3>About This Visualization</h3>
        <p>
          This real-time artwork translates market psychology into visual form. The algorithm analyzes 
          the VIX volatility index and market sentiment to generate organic color fields that pulse 
          and flow with market emotions.
        </p>
        <ul>
          <li><strong>Red intensity</strong> increases with market fear (high VIX)</li>
          <li><strong>Flow patterns</strong> respond to volatility changes</li>
          <li><strong>Particle movement</strong> reflects market sentiment shifts</li>
          <li><strong>Color saturation</strong> indicates emotional extremes</li>
        </ul>
      </div>
      
      <div class="technical-specs">
        <h4>Technical Implementation</h4>
        <div class="specs-grid">
          <div class="spec-item">
            <span class="spec-label">Data Source</span>
            <span class="spec-value">Alpha Vantage API</span>
          </div>
          <div class="spec-item">
            <span class="spec-label">Update Frequency</span>
            <span class="spec-value">Every 30 seconds</span>
          </div>
          <div class="spec-item">
            <span class="spec-label">Rendering</span>
            <span class="spec-value">HTML5 Canvas</span>
          </div>
          <div class="spec-item">
            <span class="spec-label">Algorithm</span>
            <span class="spec-value">Perlin Noise + VIX</span>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<style>
  .visualization-header {
    text-align: center;
    margin-bottom: 2rem;
  }
  
  .viz-subtitle {
    color: var(--text-secondary);
    font-style: italic;
    margin-bottom: 2rem;
  }
  
  .market-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    margin-bottom: 2rem;
  }
  
  .stat-item {
    background: var(--bg-card);
    padding: 1rem;
    border: 2px solid var(--border-light);
    border-radius: 8px;
    text-align: center;
  }
  
  .stat-label {
    display: block;
    color: var(--text-secondary);
    font-size: 0.875rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin-bottom: 0.5rem;
  }
  
  .stat-value {
    display: block;
    color: var(--accent-primary);
    font-size: 1.25rem;
    font-weight: 700;
    font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Display', 'SF Pro Text', system-ui, sans-serif;
  }
  
  .visualization-container {
    position: relative;
    margin-bottom: 3rem;
  }
  
  #emotions-canvas {
    width: 100%;
    height: 500px;
    border: 2px solid var(--border-light);
    border-radius: 8px;
    background: var(--card-bg);
    display: block;
  }
  
  .controls {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 2rem;
    margin-top: 1rem;
    padding: 1rem;
    background: var(--bg-accent);
    border-radius: 8px;
  }
  
  .control-btn {
    background: var(--accent-primary);
    color: var(--text-on-dark);
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 6px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .control-btn:hover {
    background: var(--accent-secondary);
    transform: translateY(-1px);
  }
  
  .intensity-control {
    display: flex;
    align-items: center;
    gap: 1rem;
  }
  
  .intensity-control label {
    color: var(--text-secondary);
    font-weight: 600;
    font-size: 0.875rem;
  }
  
  .intensity-control input {
    width: 150px;
  }
  
  #intensity-value {
    color: var(--accent-primary);
    font-weight: 600;
    min-width: 40px;
  }
  
  .artwork-info {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 3rem;
    margin-top: 3rem;
  }
  
  .description {
    background: var(--bg-card);
    padding: 2rem;
    border: 2px solid var(--border-light);
    border-radius: 8px;
  }
  
  .description h3 {
    color: var(--text-primary);
    margin-bottom: 1rem;
    font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Display', 'SF Pro Text', system-ui, sans-serif;
  }
  
  .description p {
    color: var(--text-secondary);
    line-height: 1.7;
    margin-bottom: 1.5rem;
  }
  
  .description ul {
    color: var(--text-secondary);
    line-height: 1.6;
  }
  
  .description li {
    margin-bottom: 0.5rem;
  }
  
  .technical-specs {
    background: var(--blog-parchment);
    padding: 2rem;
    border: 2px solid var(--border-light);
    border-radius: 8px;
  }
  
  .technical-specs h4 {
    color: var(--text-primary);
    margin-bottom: 1.5rem;
    font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Display', 'SF Pro Text', system-ui, sans-serif;
  }
  
  .specs-grid {
    display: grid;
    gap: 1rem;
  }
  
  .spec-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: var(--bg-card);
    border: 1px solid var(--border-light);
    border-radius: 6px;
  }
  
  .spec-label {
    color: var(--text-secondary);
    font-weight: 600;
    font-size: 0.875rem;
  }
  
  .spec-value {
    color: var(--accent-primary);
    font-weight: 600;
  }
  
  @media (max-width: 768px) {
    .market-stats {
      grid-template-columns: 1fr;
    }
    
    .controls {
      flex-direction: column;
      gap: 1rem;
    }
    
    .artwork-info {
      grid-template-columns: 1fr;
      gap: 2rem;
    }
    
    #emotions-canvas {
      height: 400px;
    }
  }
</style>

<script>
  // Market Emotions Visualization Engine
  class MarketEmotionsVisualizer {
    constructor(canvas) {
      this.canvas = canvas;
      this.ctx = canvas.getContext('2d');
      this.width = canvas.width = canvas.offsetWidth * 2; // High DPI
      this.height = canvas.height = canvas.offsetHeight * 2;
      this.ctx.scale(2, 2);
      
      // Market data
      this.vix = 20; // Default VIX
      this.sentiment = 0; // -1 to 1
      this.intensity = 1.0;
      
      // Animation state
      this.isPlaying = true;
      this.time = 0;
      this.particles = [];
      this.noiseOffset = 0;
      
      this.initParticles();
      this.animate();
    }
    
    initParticles() {
      this.particles = [];
      const count = 200;
      
      for (let i = 0; i < count; i++) {
        this.particles.push({
          x: Math.random() * this.width / 2,
          y: Math.random() * this.height / 2,
          vx: (Math.random() - 0.5) * 2,
          vy: (Math.random() - 0.5) * 2,
          size: Math.random() * 3 + 1,
          opacity: Math.random() * 0.8 + 0.2,
          life: Math.random() * 100 + 50
        });
      }
    }
    
    // Simplified Perlin noise
    noise(x, y) {
      return Math.sin(x * 0.01 + this.time * 0.01) * 
             Math.cos(y * 0.01 + this.time * 0.005) * 0.5 + 0.5;
    }
    
    updateMarketData(vix, sentiment) {
      this.vix = vix;
      this.sentiment = sentiment;
      
      // Update UI
      document.getElementById('vix-value').textContent = vix.toFixed(2);
      document.getElementById('sentiment-value').textContent = 
        sentiment > 0 ? `Bullish (${(sentiment * 100).toFixed(0)}%)` :
        sentiment < 0 ? `Bearish (${(Math.abs(sentiment) * 100).toFixed(0)}%)` : 'Neutral';
      
      // Emotional state based on VIX
      const emotionState = vix > 30 ? 'Extreme Fear' :
                          vix > 20 ? 'Fear' :
                          vix > 15 ? 'Caution' :
                          vix > 12 ? 'Confidence' : 'Euphoria';
      document.getElementById('emotion-state').textContent = emotionState;
    }
    
    updateParticles() {
      if (!this.isPlaying) return;
      
      this.particles.forEach(particle => {
        // Fear factor increases movement chaos
        const fearFactor = (this.vix / 100) * this.intensity;
        const noiseX = this.noise(particle.x + this.noiseOffset, particle.y) - 0.5;
        const noiseY = this.noise(particle.x, particle.y + this.noiseOffset) - 0.5;
        
        // Apply market forces
        particle.vx += noiseX * fearFactor * 0.5;
        particle.vy += noiseY * fearFactor * 0.5;
        
        // Sentiment affects overall direction
        particle.vy += this.sentiment * 0.1;
        
        // Apply velocity
        particle.x += particle.vx;
        particle.y += particle.vy;
        
        // Friction
        particle.vx *= 0.98;
        particle.vy *= 0.98;
        
        // Boundary wrapping
        if (particle.x < 0) particle.x = this.width / 2;
        if (particle.x > this.width / 2) particle.x = 0;
        if (particle.y < 0) particle.y = this.height / 2;
        if (particle.y > this.height / 2) particle.y = 0;
        
        // Life cycle
        particle.life--;
        if (particle.life <= 0) {
          particle.x = Math.random() * this.width / 2;
          particle.y = Math.random() * this.height / 2;
          particle.life = Math.random() * 100 + 50;
        }
      });
      
      this.noiseOffset += 0.5;
    }
    
    render() {
      // Clear canvas with fade effect
      this.ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';
      this.ctx.fillRect(0, 0, this.width / 2, this.height / 2);
      
      // Calculate colors based on market emotion
      const fearIntensity = Math.min(this.vix / 50, 1) * this.intensity;
      const red = Math.floor(255 * fearIntensity);
      const green = Math.floor(50 * (1 - fearIntensity));
      const blue = Math.floor(50 * (1 - fearIntensity));
      
      // Draw particles
      this.particles.forEach(particle => {
        const size = particle.size * (1 + fearIntensity);
        const opacity = particle.opacity * (0.3 + fearIntensity * 0.7);
        
        this.ctx.fillStyle = `rgba(${red}, ${green}, ${blue}, ${opacity})`;
        this.ctx.beginPath();
        this.ctx.arc(particle.x, particle.y, size, 0, Math.PI * 2);
        this.ctx.fill();
        
        // Add glow effect for high fear
        if (fearIntensity > 0.5) {
          this.ctx.shadowColor = `rgba(${red}, ${green}, ${blue}, ${opacity * 0.5})`;
          this.ctx.shadowBlur = size * 2;
          this.ctx.fill();
          this.ctx.shadowBlur = 0;
        }
      });
    }
    
    animate() {
      this.updateParticles();
      this.render();
      this.time++;
      
      requestAnimationFrame(() => this.animate());
    }
    
    setIntensity(intensity) {
      this.intensity = intensity;
    }
    
    togglePlayPause() {
      this.isPlaying = !this.isPlaying;
      return this.isPlaying;
    }
    
    reset() {
      this.initParticles();
      this.time = 0;
      this.noiseOffset = 0;
    }
  }
  
  // Initialize visualization
  const canvas = document.getElementById('emotions-canvas');
  const visualizer = new MarketEmotionsVisualizer(canvas);
  
  // Mock market data simulation (replace with real API)
  function simulateMarketData() {
    const baseVix = 18;
    const vixVariation = Math.sin(Date.now() / 10000) * 8 + Math.random() * 4;
    const vix = Math.max(10, baseVix + vixVariation);
    
    const sentiment = Math.sin(Date.now() / 15000) * 0.8 + (Math.random() - 0.5) * 0.4;
    
    visualizer.updateMarketData(vix, sentiment);
  }
  
  // Controls
  document.getElementById('play-pause').addEventListener('click', (e) => {
    const isPlaying = visualizer.togglePlayPause();
    e.target.textContent = isPlaying ? '‚è∏Ô∏è Pause' : '‚ñ∂Ô∏è Play';
  });
  
  document.getElementById('reset').addEventListener('click', () => {
    visualizer.reset();
  });
  
  document.getElementById('intensity').addEventListener('input', (e) => {
    const intensity = parseFloat(e.target.value);
    visualizer.setIntensity(intensity);
    document.getElementById('intensity-value').textContent = intensity.toFixed(1) + 'x';
  });
  
  // Start market data simulation
  simulateMarketData();
  setInterval(simulateMarketData, 30000); // Update every 30 seconds
  
  // Handle canvas resize
  window.addEventListener('resize', () => {
    visualizer.width = canvas.width = canvas.offsetWidth * 2;
    visualizer.height = canvas.height = canvas.offsetHeight * 2;
    visualizer.ctx.scale(2, 2);
  });
</script>